name: Staging

concurrency:
  group: ci-staging-${{ github.sha }}
  cancel-in-progress: false

on: workflow_dispatch

jobs:
  build:
    name: Staging
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: '20'
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_REMOTE_ONLY: ${{ secrets.TURBO_REMOTE_ONLY }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
      - name: Cache node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install dependencies
        run: npm ci --maxsockets 1
      - name: Build
        run: npm run build:fast -- --force
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.STAGING_GOOGLE_CLIENT_ID }}
          MEDPLUM_BASE_URL: ${{ secrets.STAGING_MEDPLUM_BASE_URL }}
          RECAPTCHA_SITE_KEY: ${{ secrets.STAGING_RECAPTCHA_SITE_KEY }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.STAGING_AWS_REGION }}
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.STAGING_DOCKERHUB_USERNAME }}
          password: ${{ secrets.STAGING_DOCKERHUB_TOKEN }}
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Deploy App
        run: ./scripts/deploy-app.sh
        env:
          APP_BUCKET: ${{ secrets.STAGING_APP_BUCKET }}
          AWS_REGION: ${{ secrets.STAGING_AWS_REGION }}
      - name: Build Docker Image
        run: ./scripts/build-docker.sh
        env:
          DOCKERHUB_REPOSITORY: ${{ secrets.STAGING_DOCKERHUB_REPOSITORY }}
      - name: Deploy Server
        run: ./scripts/deploy-server.sh
        env:
          AWS_REGION: ${{ secrets.STAGING_AWS_REGION }}
          ECS_CLUSTER: ${{ secrets.STAGING_ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.STAGING_ECS_SERVICE }}
