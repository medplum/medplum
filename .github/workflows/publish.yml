name: Publish
# Based on: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages
on:
  push:
    tags:
      - 'v*'
jobs:
  build_and_check:
    name: publish
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      NODE_VERSION: '20'
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_REMOTE_ONLY: ${{ secrets.TURBO_REMOTE_ONLY }}
    permissions:
      actions: read
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Cache node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Slack start message
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {"text": "Starting publish: ${{ github.ref_name }}"}

      - name: Install dependencies
        run: npm ci --maxsockets 1

      - name: Build
        run: npm run build:all
        env:
          MEDPLUM_BASE_URL: '__MEDPLUM_BASE_URL__'
          MEDPLUM_CLIENT_ID: '__MEDPLUM_CLIENT_ID__'
          MEDPLUM_REGISTER_ENABLED: '__MEDPLUM_REGISTER_ENABLED__'
          GOOGLE_CLIENT_ID: '__GOOGLE_CLIENT_ID__'
          RECAPTCHA_SITE_KEY: '__RECAPTCHA_SITE_KEY__'

      - name: Publish to NPM
        run: ./scripts/publish.sh
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Sync example repos
        run: ./scripts/update-example-changes.sh "${{ secrets.SYNC_REPO_TOKEN }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker images
        run: ./scripts/build-docker.sh --release
        env:
          DOCKERHUB_REPOSITORY: ${{ secrets.DOCKERHUB_REPOSITORY }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy bot layer
        run: ./scripts/deploy-bot-layer.sh

  build_agent_win64:
    runs-on: windows-latest
    timeout-minutes: 45
    env:
      NODE_VERSION: '20'
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_REMOTE_ONLY: ${{ secrets.TURBO_REMOTE_ONLY }}
    permissions:
      actions: read
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install NSIS
        run: choco install nsis

      - name: Install Wget
        run: choco install wget

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci --maxsockets 1

      - name: Build
        run: npm run build -- --filter=@medplum/agent

      - name: Find signtool
        uses: actions/github-script@v6
        id: find-signtool
        with:
          result-encoding: string
          script: |
            const fs = require('node:fs/promises');

            /**
            * Searches the installed Windows SDKs for the most recent signtool.exe version
            * Taken from https://github.com/dlemstra/code-sign-action
            * @returns Path to most recent signtool.exe (x86 version)
            */
            async function getSigntoolLocation() {
                const windowsKitsFolder = 'C:/Program Files (x86)/Windows Kits/10/bin/';
                const folders = await fs.readdir(windowsKitsFolder);
                let fileName = '';
                let maxVersion = 0;
                for (const folder of folders) {
                    if (!folder.endsWith('.0')) {
                        continue;
                    }
                    const folderVersion = parseInt(folder.replace(/\./g,''));
                    if (folderVersion > maxVersion) {
                        const signtoolFilename = `${windowsKitsFolder}${folder}/x64/signtool.exe`;
                        try {
                            const stat = await fs.stat(signtoolFilename);
                            if (stat.isFile()) {
                                fileName = signtoolFilename;
                                maxVersion = folderVersion;
                            }
                        } catch {
                            console.warn('Skipping %s due to error.', signtoolFilename);
                        }
                    }
                }
                if(fileName == '') {
                    throw new Error('Unable to find signtool.exe in ' + windowsKitsFolder);
                }

                console.log(fileName);
                return fileName;
            }

            const path = await getSigntoolLocation();
            return path.replace(' ', '\ ');

      - name: Build Agent installer
        shell: bash
        run: ./scripts/build-agent-installer-win64.sh
        env:
          SIGNTOOL_PATH: ${{steps.find-signtool.outputs.result}}
          SM_HOST: ${{ secrets.SM_HOST }}
          SM_API_KEY: ${{ secrets.SM_API_KEY }}
          SM_CLIENT_CERT_FILE_BASE64: ${{ secrets.SM_CLIENT_CERT_FILE_BASE64 }}
          SM_CLIENT_CERT_PASSWORD: ${{ secrets.SM_CLIENT_CERT_PASSWORD }}
          SM_CERT_ALIAS: ${{ secrets.SM_CERT_ALIAS }}

      - name: Upload Agent installer
        uses: actions/github-script@v6
        with:
          script: |
            const packageJson = require('./packages/agent/package.json');
            const fs = require('fs');
            const tag = context.ref.replace("refs/tags/", "");
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag
            });
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: "medplum-agent-installer-" + packageJson.version + ".exe",
              data: await fs.readFileSync("packages/agent/medplum-agent-installer-" + packageJson.version + ".exe")
            });
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: "medplum-agent-installer-" + packageJson.version + ".exe.sha256",
              data: await fs.readFileSync("packages/agent/medplum-agent-installer-" + packageJson.version + ".exe.sha256")
            });

  build_agent_linux:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      NODE_VERSION: '20'
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_REMOTE_ONLY: ${{ secrets.TURBO_REMOTE_ONLY }}
    permissions:
      actions: read
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci --maxsockets 1

      - name: Build
        run: npm run build -- --filter=@medplum/agent

      - name: Build Agent
        shell: bash
        run: ./scripts/build-agent-installer-linux.sh

      - name: Upload Agent
        uses: actions/github-script@v6
        with:
          script: |
            const packageJson = require('./packages/agent/package.json');
            const fs = require('fs');
            const tag = context.ref.replace("refs/tags/", "");
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag
            });
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: "medplum-agent-" + packageJson.version + "-linux",
              data: await fs.readFileSync("packages/agent/medplum-agent-" + packageJson.version + "-linux")
            });
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: "medplum-agent-" + packageJson.version + "-linux.sha256",
              data: await fs.readFileSync("packages/agent/medplum-agent-" + packageJson.version + "-linux.sha256")
            });

  build_deb:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      NODE_VERSION: '20'
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_REMOTE_ONLY: ${{ secrets.TURBO_REMOTE_ONLY }}
    permissions:
      actions: read
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci --maxsockets 1

      - name: Build
        run: npm run build:fast

      - name: Build Deb
        shell: bash
        run: ./scripts/build-deb.sh

      - name: Upload Deb
        uses: actions/github-script@v6
        with:
          script: |
            const packageJson = require('./packages/agent/package.json');
            const fs = require('fs');
            const tag = context.ref.replace("refs/tags/", "");
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag
            });
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: "medplum_" + packageJson.version + "_all.deb",
              data: await fs.readFileSync("medplum_" + packageJson.version + "_all.deb")
            });
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: "medplum_" + packageJson.version + "_all.deb.sha256",
              data: await fs.readFileSync("medplum_" + packageJson.version + "_all.deb.sha256")
            });

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'

      - name: Install deb-s3
        run: gem install deb-s3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Import GPG key
        run: |
          echo "${{ secrets.MEDPLUM_GPG_KEY }}" | gpg --import
          echo "${{ secrets.MEDPLUM_GPG_PASSPHRASE }}" | gpg --passphrase-fd 0 --pinentry-mode loopback -u ${{ secrets.MEDPLUM_GPG_KEY_ID }} --yes --sign test.txt

      - name: Upload to APT repository
        run: |
          deb-s3 upload \
            --bucket apt.medplum.com \
            --prefix ubuntu \
            --codename jammy \
            --sign=${{ secrets.MEDPLUM_GPG_KEY_ID }} \
            --gpg-options="--passphrase-fd 0 --pinentry-mode loopback" \
            --preserve-versions \
            medplum_*.deb \
            < <(echo "${{ secrets.MEDPLUM_GPG_PASSPHRASE }}")
