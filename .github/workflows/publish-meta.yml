name: Publish meta

on:
  # We publish meta on workflow run since the release manifest requires artifacts of agent build steps
  # to be present in the GitHub release manifest that are built and only present after the Publish step runs
  workflow_run:
    workflows: [Publish]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: read

jobs:
  update-versions:
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
      - name: Verify AWS CLI Installation
        run: aws --version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download releases and upload assets to S3
        run: |
          # Download releases data
          curl -s "https://api.github.com/repos/medplum/medplum/releases?per_page=100" > releases.json

          # Process each release and upload assets to S3
          jq -c '.[]' releases.json | while read -r release; do
            TAG_NAME=$(echo "$release" | jq -r '.tag_name')
            echo "Processing release: $TAG_NAME"
            
            # Track if all assets exist for this release
            ALL_EXIST=true
            
            # Process each asset in the release
            echo "$release" | jq -c '.assets[]' | while read -r asset; do
              ASSET_NAME=$(echo "$asset" | jq -r '.name')
              DOWNLOAD_URL=$(echo "$asset" | jq -r '.browser_download_url')
              S3_KEY="releases/${TAG_NAME}/${ASSET_NAME}"
              
              echo "  Checking asset: $ASSET_NAME"
              
              # Check if asset already exists in S3 (idempotent check)
              if aws s3 ls "s3://download.medplum.com/${S3_KEY}" > /dev/null 2>&1; then
                echo "    Asset already exists in S3, skipping"
              else
                echo "    Streaming asset directly to S3"
                # Mark that not all assets existed
                ALL_EXIST=false
                # Stream directly from curl to S3
                curl -L "$DOWNLOAD_URL" | aws s3 cp - "s3://download.medplum.com/${S3_KEY}" \
                  --cache-control "public, max-age=31536000, immutable"
              fi
            done
            
            # If all assets existed for this release, stop processing older releases
            if [ "$ALL_EXIST" = true ]; then
              echo "  All assets already exist for this release, stopping processing of older releases"
              break
            fi
          done

      - name: Create JSON manifests with S3 URLs
        run: |
          # Process JSON with jq to create the desired structure
          # Replace GitHub URLs with S3 URLs
          jq '{
            versions: [
              .[] | . as $release | {
                tag_name,
                version: (.tag_name | ltrimstr("v")),
                published_at,
                assets: [
                  .assets[] | {
                    name,
                    browser_download_url: "https://download.medplum.com/releases/\($release.tag_name)/\(.name)"
                  }
                ]
              }
            ]
          }' releases.json > all.json

          # Create latest release file
          jq '.[0] | . as $release | {
            tag_name,
            version: (.tag_name | ltrimstr("v")),
            published_at,
            assets: [
              .assets[] | {
                name,
                browser_download_url: "https://download.medplum.com/releases/\($release.tag_name)/\(.name)"
              }
            ]
          }' releases.json > latest.json

          # Extract version tag for versioned filename
          VERSION_TAG=$(jq -r '.[0].tag_name' releases.json)
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV

      - name: Upload JSON manifests to S3
        run: |
          # Upload all versions JSON
          aws s3 cp all.json s3://meta.medplum.com/releases/all.json \
            --content-type "application/json" \
            --cache-control "no-cache"

          # Upload latest.json
          aws s3 cp latest.json s3://meta.medplum.com/releases/latest.json \
            --content-type "application/json" \
            --cache-control "no-cache"

          # Upload versioned copy
          aws s3 cp latest.json "s3://meta.medplum.com/releases/${VERSION_TAG}.json" \
            --content-type "application/json" \
            --cache-control "no-cache"
