name: 'Sync Repos'

on: 
  pull_request:
    types: [synchronize]

jobs:
  check_changes_and_update_repo:
    runs-on: ubuntu-latest
    permissions:
      actions: read 
      contents: write 
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check if examples folder has changes
      id: check_example_projects_changes
      run: |
        CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} -- 'packages/examples/*')
        if [ -n "$CHANGED_FILES" ]; then
          echo "::set-output name=has_changes::true"
        else
          echo "::set-output name=has_changes::false"
        fi

      - name: Check for changes in specified path
        if: steps.check_example_projects_changes.outputs.has_changes == 'true'
        id: check_changes
        run: |
          changed_paths=""
          for path in packages/examples/*/; do
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} -- "${path}*")
            if [ -n "$CHANGED_FILES" ]; then
              changed_paths="$path"
            fi
          done
          echo "::set-output name=changed_paths::$changed_paths"

      - name: Update listening repo
        if: steps.check_changes.outputs.changed_paths != ''
        run: |
          # Configure Git with the bot's name and email
          git config --global user.name "jamestouri"
          git config --global user.email "j_touri@yahoo.com"

          for path in ${{ steps.check_changes.outputs.changed_paths }}; do

            folder_name=$path

            # Check if the listening repo exists
            REPO_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/medplum/${folder_name}")

            # If the repo does not exist, create a new repo
            if [ $REPO_STATUS -eq 404 ]; then
              CREATE_REPO_PAYLOAD=$(echo -n "{\"name\": \"${folder_name}\"}" | base64)
              CREATE_REPO_RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" -H "Accept: application/vnd.github+json" --data-binary "{\"data\": \"$CREATE_REPO_PAYLOAD\"}" "https://api.github.com/orgs/medplum/repos")
              echo "Created new repo: $(echo $CREATE_REPO_RESPONSE | jq -r '.html_url')"
            fi

            # Clone the corresponding listening repo
            git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/medplum/${folder_name}.git

            # Create a new branch for the changes
            cd ${folder_name}
            new_branch_name="update-from-source-medplum"
            git checkout -b $new_branch_name

            # Copy changed files to the listening repo
            cp -R packages/examples/${folder_name}/* ${folder_name}/*

            # Commit and push changes to the listening repo
            cd ${folder_name}
            git add .
            git commit -m "Update from main medplum repo"
            git push origin $new_branch_name

            # Create a pull request using the GitHub API
            PR_PAYLOAD=$(echo -n "{\"title\": \"Update from source repo: medplum\", \"head\": \"$new_branch_name\", \"base\": \"main\"}" | base64)
            PR_RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" -H "Accept: application/vnd.github+json" --data-binary "{\"data\": \"$PR_PAYLOAD\"}" "https://api.github.com/repos/your-organization/${folder_name}/pulls")
            echo "Created PR: $(echo $PR_RESPONSE | jq -r '.html_url')"

            # Cleanup: Remove the cloned repo folder and delete the local branch
            cd ..
            rm -rf ${folder_name}
          done