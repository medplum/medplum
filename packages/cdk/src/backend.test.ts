import { MedplumInfraConfig } from '@medplum/core';
import { App } from 'aws-cdk-lib';
import { BackEnd } from './backend';
import { MedplumPrimaryStack } from './stack';

describe('BackEnd', () => {
  let config: MedplumInfraConfig;
  let app: App;
  let stack: MedplumPrimaryStack;

  beforeEach(() => {
    config = {
      stackName: 'test-stack',
      name: 'test',
      region: 'us-east-1',
      accountNumber: '123456789012',
      domainName: 'test.com',
      email: 'test@test.com',
      jwtSecret: 'secret',
      adminPassword: 'password',
      databaseUrl: 'postgres://test:test@localhost/test',
      redisUrl: 'redis://localhost',
      smtpHost: 'localhost',
      smtpPort: 587,
      smtpUsername: 'test',
      smtpPassword: 'password',
      enableEmail: true,
      enableSms: true,
      enableVoice: true,
      enableFax: true,
      enablePrint: true,
      enablePatientPortal: true,
      enableAdmin: true,
      enableWebsockets: true,
      enableSubscriptions: true,
      enableAudit: true,
      enableEsbuild: true,
      enableMinify: true,
      enableSourcemaps: true,
      enableHotReload: true,
      enableServiceWorker: true,
      enableSearch: true,
      enableStorage: true,
      enableBackup: true,
      enableHl7: true,
      enableDicom: true,
      enableFhir: true,
      enableGraphql: true,
      enableScim: true,
      enableOauth: true,
      enableBulkData: true,
      enablePatientEverything: true,
      enablePlanDefinitionApply: true,
      enableBinary: true,
      enableAuditEvent: true,
      enableProvenance: true,
      enableTask: true,
      enableSubscription: true,
      enableMessage: true,
      enableCommunication: true,
      enableCommunicationRequest: true,
      enableDeviceRequest: true,
      enableMedicationRequest: true,
      enableNutritionOrder: true,
      enableServiceRequest: true,
      enableSupplyRequest: true,
      enableVisionPrescription: true,
      enableAppointment: true,
      enableAppointmentResponse: true,
      enableSchedule: true,
      enableSlot: true,
      enableVerificationResult: true,
      enableImmunization: true,
      enableImmunizationEvaluation: true,
      enableImmunizationRecommendation: true,
      enableDiagnosticReport: true,
      enableObservation: true,
      enableMedia: true,
      enableDocumentReference: true,
      enableQuestionnaire: true,
      enableQuestionnaireResponse: true,
      enableOperationOutcome: true,
      enableBundle: true,
      enableBasic: true,
      enableAccount: true,
      enableActivityDefinition: true,
      enableAdverseEvent: true,
      enableAllergyIntolerance: true,
      enableAppointment: true,
      enableAppointmentResponse: true,
      enableAuditEvent: true,
      enableBasic: true,
      enableBinary: true,
      enableBiologicallyDerivedProduct: true,
      enableBodyStructure: true,
      enableBundle: true,
      enableCapabilityStatement: true,
      enableCarePlan: true,
      enableCareTeam: true,
      enableCatalogEntry: true,
      enableChargeItem: true,
      enableChargeItemDefinition: true,
      enableClaim: true,
      enableClaimResponse: true,
      enableClinicalImpression: true,
      enableCodeSystem: true,
      enableCommunication: true,
      enableCommunicationRequest: true,
      enableCompartmentDefinition: true,
      enableComposition: true,
      enableConceptMap: true,
      enableCondition: true,
      enableConsent: true,
      enableContract: true,
      enableCoverage: true,
      enableCoverageEligibilityRequest: true,
      enableCoverageEligibilityResponse: true,
      enableDetectedIssue: true,
      enableDevice: true,
      enableDeviceDefinition: true,
      enableDeviceMetric: true,
      enableDeviceRequest: true,
      enableDeviceUseStatement: true,
      enableDiagnosticReport: true,
      enableDocumentManifest: true,
      enableDocumentReference: true,
      enableEffectEvidenceSynthesis: true,
      enableEncounter: true,
      enableEndpoint: true,
      enableEnrollmentRequest: true,
      enableEnrollmentResponse: true,
      enableEpisodeOfCare: true,
      enableEventDefinition: true,
      enableEvidence: true,
      enableEvidenceVariable: true,
      enableExampleScenario: true,
      enableExplanationOfBenefit: true,
      enableFamilyMemberHistory: true,
      enableFlag: true,
      enableGoal: true,
      enableGraphDefinition: true,
      enableGroup: true,
      enableGuidanceResponse: true,
      enableHealthcareService: true,
      enableImagingStudy: true,
      enableImmunization: true,
      enableImmunizationEvaluation: true,
      enableImmunizationRecommendation: true,
      enableImplementationGuide: true,
      enableInsurancePlan: true,
      enableInvoice: true,
      enableLibrary: true,
      enableLinkage: true,
      enableList: true,
      enableLocation: true,
      enableMeasure: true,
      enableMeasureReport: true,
      enableMedia: true,
      enableMedication: true,
      enableMedicationAdministration: true,
      enableMedicationDispense: true,
      enableMedicationKnowledge: true,
      enableMedicationRequest: true,
      enableMedicationStatement: true,
      enableMedicinalProduct: true,
      enableMedicinalProductAuthorization: true,
      enableMedicinalProductContraindication: true,
      enableMedicinalProductIndication: true,
      enableMedicinalProductIngredient: true,
      enableMedicinalProductInteraction: true,
      enableMedicinalProductManufactured: true,
      enableMedicinalProductPackaged: true,
      enableMedicinalProductPharmaceutical: true,
      enableMedicinalProductUndesirableEffect: true,
      enableMessageDefinition: true,
      enableMessageHeader: true,
      enableMolecularSequence: true,
      enableNamingSystem: true,
      enableNutritionOrder: true,
      enableObservation: true,
      enableObservationDefinition: true,
      enableOperationDefinition: true,
      enableOperationOutcome: true,
      enableOrganization: true,
      enableOrganizationAffiliation: true,
      enablePatient: true,
      enablePaymentNotice: true,
      enablePaymentReconciliation: true,
      enablePerson: true,
      enablePlanDefinition: true,
      enablePractitioner: true,
      enablePractitionerRole: true,
      enableProcedure: true,
      enableProvenance: true,
      enableQuestionnaire: true,
      enableQuestionnaireResponse: true,
      enableRelatedPerson: true,
      enableRequestGroup: true,
      enableResearchDefinition: true,
      enableResearchElementDefinition: true,
      enableResearchStudy: true,
      enableResearchSubject: true,
      enableRiskAssessment: true,
      enableRiskEvidenceSynthesis: true,
      enableSchedule: true,
      enableSearchParameter: true,
      enableServiceRequest: true,
      enableSlot: true,
      enableSpecimen: true,
      enableSpecimenDefinition: true,
      enableStructureDefinition: true,
      enableStructureMap: true,
      enableSubscription: true,
      enableSubstance: true,
      enableSubstanceNucleicAcid: true,
      enableSubstancePolymer: true,
      enableSubstanceProtein: true,
      enableSubstanceReferenceInformation: true,
      enableSubstanceSourceMaterial: true,
      enableSubstanceSpecification: true,
      enableSupplyDelivery: true,
      enableSupplyRequest: true,
      enableTask: true,
      enableTerminologyCapabilities: true,
      enableTestReport: true,
      enableTestScript: true,
      enableValueSet: true,
      enableVerificationResult: true,
      enableVisionPrescription: true,
    };
    app = new App();
    stack = new MedplumPrimaryStack(app, config);
  });

  it('should be instantiated without throwing an error', () => {
    expect(() => new BackEnd(stack, config)).not.toThrow();
  });

  // Test for AWS Lambda function
  it('should define a Lambda function with correct properties', () => {
    const backend = new BackEnd(stack, config);
    const lambdaFunction = backend.node.findChild('LambdaFunctionName') as lambda.Function; // Replace 'LambdaFunctionName' with the actual name of the Lambda function

    expect(lambdaFunction).toBeDefined();
    expect(lambdaFunction.runtime).toEqual(lambda.Runtime.NODEJS_14_X); // Replace with the actual runtime
    expect(lambdaFunction.handler).toEqual('index.handler'); // Replace with the actual handler
    expect(lambdaFunction.environment).toEqual({
      // Replace with the actual environment variables
      VAR1: 'value1',
      VAR2: 'value2',
    });
  });

  // Additional tests go here
});
