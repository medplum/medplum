/*
 * Generated by @medplum/generator
 * Do not edit manually.
 */

import { CodeableConcept } from './CodeableConcept';
import { Coding } from './Coding';
import { DocumentReference } from './DocumentReference';
import { Extension } from './Extension';
import { Identifier } from './Identifier';
import { MarketingStatus } from './MarketingStatus';
import { MedicinalProductIndication } from './MedicinalProductIndication';
import { MedicinalProductPackaged } from './MedicinalProductPackaged';
import { MedicinalProductPharmaceutical } from './MedicinalProductPharmaceutical';
import { Meta } from './Meta';
import { Narrative } from './Narrative';
import { Organization } from './Organization';
import { PractitionerRole } from './PractitionerRole';
import { Reference } from './Reference';
import { ResearchStudy } from './ResearchStudy';
import { Resource } from './Resource';

/**
 * Detailed definition of a medicinal product, typically for uses other
 * than direct patient care (e.g. regulatory use).
 */
export interface MedicinalProduct {

  /**
   * This is a MedicinalProduct resource
   */
  readonly resourceType: 'MedicinalProduct';

  /**
   * The logical id of the resource, as used in the URL for the resource.
   * Once assigned, this value never changes.
   */
  readonly id?: string;

  /**
   * The metadata about the resource. This is content that is maintained by
   * the infrastructure. Changes to the content might not always be
   * associated with version changes to the resource.
   */
  readonly meta?: Meta;

  /**
   * A reference to a set of rules that were followed when the resource was
   * constructed, and which must be understood when processing the content.
   * Often, this is a reference to an implementation guide that defines the
   * special rules along with other profiles etc.
   */
  readonly implicitRules?: string;

  /**
   * The base language in which the resource is written.
   */
  readonly language?: string;

  /**
   * A human-readable narrative that contains a summary of the resource and
   * can be used to represent the content of the resource to a human. The
   * narrative need not encode all the structured data, but is required to
   * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
   * just read the narrative. Resource definitions may define what content
   * should be represented in the narrative to ensure clinical safety.
   */
  readonly text?: Narrative;

  /**
   * These resources do not have an independent existence apart from the
   * resource that contains them - they cannot be identified independently,
   * and nor can they have their own independent transaction scope.
   */
  readonly contained?: Resource[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the resource. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the resource and that modifies the
   * understanding of the element that contains it and/or the understanding
   * of the containing element's descendants. Usually modifier elements
   * provide negation or qualification. To make the use of extensions safe
   * and manageable, there is a strict set of governance applied to the
   * definition and use of extensions. Though any implementer is allowed to
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension. Applications processing a
   * resource are required to check for modifier extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * Business identifier for this product. Could be an MPID.
   */
  readonly identifier?: Identifier[];

  /**
   * Regulatory type, e.g. Investigational or Authorized.
   */
  readonly type?: CodeableConcept;

  /**
   * If this medicine applies to human or veterinary uses.
   */
  readonly domain?: Coding;

  /**
   * The dose form for a single part product, or combined form of a
   * multiple part product.
   */
  readonly combinedPharmaceuticalDoseForm?: CodeableConcept;

  /**
   * The legal status of supply of the medicinal product as classified by
   * the regulator.
   */
  readonly legalStatusOfSupply?: CodeableConcept;

  /**
   * Whether the Medicinal Product is subject to additional monitoring for
   * regulatory reasons.
   */
  readonly additionalMonitoringIndicator?: CodeableConcept;

  /**
   * Whether the Medicinal Product is subject to special measures for
   * regulatory reasons.
   */
  readonly specialMeasures?: string[];

  /**
   * If authorised for use in children.
   */
  readonly paediatricUseIndicator?: CodeableConcept;

  /**
   * Allows the product to be classified by various systems.
   */
  readonly productClassification?: CodeableConcept[];

  /**
   * Marketing status of the medicinal product, in contrast to marketing
   * authorizaton.
   */
  readonly marketingStatus?: MarketingStatus[];

  /**
   * Pharmaceutical aspects of product.
   */
  readonly pharmaceuticalProduct?: Reference<MedicinalProductPharmaceutical>[];

  /**
   * Package representation for the product.
   */
  readonly packagedMedicinalProduct?: Reference<MedicinalProductPackaged>[];

  /**
   * Supporting documentation, typically for regulatory submission.
   */
  readonly attachedDocument?: Reference<DocumentReference>[];

  /**
   * A master file for to the medicinal product (e.g. Pharmacovigilance
   * System Master File).
   */
  readonly masterFile?: Reference<DocumentReference>[];

  /**
   * A product specific contact, person (in a role), or an organization.
   */
  readonly contact?: Reference<Organization | PractitionerRole>[];

  /**
   * Clinical trials or studies that this product is involved in.
   */
  readonly clinicalTrial?: Reference<ResearchStudy>[];

  /**
   * The product's name, including full name and possibly coded parts.
   */
  readonly name?: MedicinalProductName[];

  /**
   * Reference to another product, e.g. for linking authorised to
   * investigational product.
   */
  readonly crossReference?: Identifier[];

  /**
   * An operation applied to the product, for manufacturing or
   * adminsitrative purpose.
   */
  readonly manufacturingBusinessOperation?: MedicinalProductManufacturingBusinessOperation[];

  /**
   * Indicates if the medicinal product has an orphan designation for the
   * treatment of a rare disease.
   */
  readonly specialDesignation?: MedicinalProductSpecialDesignation[];
}

/**
 * An operation applied to the product, for manufacturing or
 * adminsitrative purpose.
 */
export interface MedicinalProductManufacturingBusinessOperation {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * The type of manufacturing operation.
   */
  readonly operationType?: CodeableConcept;

  /**
   * Regulatory authorization reference number.
   */
  readonly authorisationReferenceNumber?: Identifier;

  /**
   * Regulatory authorization date.
   */
  readonly effectiveDate?: string;

  /**
   * To indicate if this proces is commercially confidential.
   */
  readonly confidentialityIndicator?: CodeableConcept;

  /**
   * The manufacturer or establishment associated with the process.
   */
  readonly manufacturer?: Reference<Organization>[];

  /**
   * A regulator which oversees the operation.
   */
  readonly regulator?: Reference<Organization>;
}

/**
 * The product's name, including full name and possibly coded parts.
 */
export interface MedicinalProductName {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * The full product name.
   */
  readonly productName?: string;

  /**
   * Coding words or phrases of the name.
   */
  readonly namePart?: MedicinalProductNameNamePart[];

  /**
   * Country where the name applies.
   */
  readonly countryLanguage?: MedicinalProductNameCountryLanguage[];
}

/**
 * Country where the name applies.
 */
export interface MedicinalProductNameCountryLanguage {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * Country code for where this name applies.
   */
  readonly country?: CodeableConcept;

  /**
   * Jurisdiction code for where this name applies.
   */
  readonly jurisdiction?: CodeableConcept;

  /**
   * Language code for this name.
   */
  readonly language?: CodeableConcept;
}

/**
 * Coding words or phrases of the name.
 */
export interface MedicinalProductNameNamePart {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * A fragment of a product name.
   */
  readonly part?: string;

  /**
   * Idenifying type for this part of the name (e.g. strength part).
   */
  readonly type?: Coding;
}

/**
 * Indicates if the medicinal product has an orphan designation for the
 * treatment of a rare disease.
 */
export interface MedicinalProductSpecialDesignation {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * Identifier for the designation, or procedure number.
   */
  readonly identifier?: Identifier[];

  /**
   * The type of special designation, e.g. orphan drug, minor use.
   */
  readonly type?: CodeableConcept;

  /**
   * The intended use of the product, e.g. prevention, treatment.
   */
  readonly intendedUse?: CodeableConcept;

  /**
   * Condition for which the medicinal use applies.
   */
  readonly indicationCodeableConcept?: CodeableConcept;

  /**
   * Condition for which the medicinal use applies.
   */
  readonly indicationReference?: Reference<MedicinalProductIndication>;

  /**
   * For example granted, pending, expired or withdrawn.
   */
  readonly status?: CodeableConcept;

  /**
   * Date when the designation was granted.
   */
  readonly date?: string;

  /**
   * Animal species for which this applies.
   */
  readonly species?: CodeableConcept;
}
