/*
 * Generated by @medplum/generator
 * Do not edit manually.
 */

import { Address } from './Address';
import { Age } from './Age';
import { Annotation } from './Annotation';
import { Attachment } from './Attachment';
import { CodeableConcept } from './CodeableConcept';
import { Coding } from './Coding';
import { ContactDetail } from './ContactDetail';
import { ContactPoint } from './ContactPoint';
import { Contributor } from './Contributor';
import { Count } from './Count';
import { DataRequirement } from './DataRequirement';
import { Distance } from './Distance';
import { Dosage } from './Dosage';
import { Duration } from './Duration';
import { Expression } from './Expression';
import { Extension } from './Extension';
import { HumanName } from './HumanName';
import { Identifier } from './Identifier';
import { Meta } from './Meta';
import { Money } from './Money';
import { Narrative } from './Narrative';
import { ParameterDefinition } from './ParameterDefinition';
import { Period } from './Period';
import { Quantity } from './Quantity';
import { Range } from './Range';
import { Ratio } from './Ratio';
import { Reference } from './Reference';
import { RelatedArtifact } from './RelatedArtifact';
import { Resource } from './Resource';
import { SampledData } from './SampledData';
import { Signature } from './Signature';
import { Timing } from './Timing';
import { TriggerDefinition } from './TriggerDefinition';
import { UsageContext } from './UsageContext';

/**
 * A task to be performed.
 */
export interface Task {

  /**
   * This is a Task resource
   */
  readonly resourceType: 'Task';

  /**
   * The logical id of the resource, as used in the URL for the resource.
   * Once assigned, this value never changes.
   */
  readonly id?: string;

  /**
   * The metadata about the resource. This is content that is maintained by
   * the infrastructure. Changes to the content might not always be
   * associated with version changes to the resource.
   */
  readonly meta?: Meta;

  /**
   * A reference to a set of rules that were followed when the resource was
   * constructed, and which must be understood when processing the content.
   * Often, this is a reference to an implementation guide that defines the
   * special rules along with other profiles etc.
   */
  readonly implicitRules?: string;

  /**
   * The base language in which the resource is written.
   */
  readonly language?: string;

  /**
   * A human-readable narrative that contains a summary of the resource and
   * can be used to represent the content of the resource to a human. The
   * narrative need not encode all the structured data, but is required to
   * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
   * just read the narrative. Resource definitions may define what content
   * should be represented in the narrative to ensure clinical safety.
   */
  readonly text?: Narrative;

  /**
   * These resources do not have an independent existence apart from the
   * resource that contains them - they cannot be identified independently,
   * and nor can they have their own independent transaction scope.
   */
  readonly contained?: Resource[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the resource. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the resource and that modifies the
   * understanding of the element that contains it and/or the understanding
   * of the containing element's descendants. Usually modifier elements
   * provide negation or qualification. To make the use of extensions safe
   * and manageable, there is a strict set of governance applied to the
   * definition and use of extensions. Though any implementer is allowed to
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension. Applications processing a
   * resource are required to check for modifier extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * The business identifier for this task.
   */
  readonly identifier?: Identifier[];

  /**
   * The URL pointing to a *FHIR*-defined protocol, guideline, orderset or
   * other definition that is adhered to in whole or in part by this Task.
   */
  readonly instantiatesCanonical?: string;

  /**
   * The URL pointing to an *externally* maintained  protocol, guideline,
   * orderset or other definition that is adhered to in whole or in part by
   * this Task.
   */
  readonly instantiatesUri?: string;

  /**
   * BasedOn refers to a higher-level authorization that triggered the
   * creation of the task.  It references a &quot;request&quot; resource such as a
   * ServiceRequest, MedicationRequest, ServiceRequest, CarePlan, etc.
   * which is distinct from the &quot;request&quot; resource the task is seeking to
   * fulfill.  This latter resource is referenced by FocusOn.  For example,
   * based on a ServiceRequest (= BasedOn), a task is created to fulfill a
   * procedureRequest ( = FocusOn ) to collect a specimen from a patient.
   */
  readonly basedOn?: Reference[];

  /**
   * An identifier that links together multiple tasks and other requests
   * that were created in the same context.
   */
  readonly groupIdentifier?: Identifier;

  /**
   * Task that this particular task is part of.
   */
  readonly partOf?: Reference[];

  /**
   * The current status of the task.
   */
  readonly status?: string;

  /**
   * An explanation as to why this task is held, failed, was refused, etc.
   */
  readonly statusReason?: CodeableConcept;

  /**
   * Contains business-specific nuances of the business state.
   */
  readonly businessStatus?: CodeableConcept;

  /**
   * Indicates the &quot;level&quot; of actionability associated with the Task, i.e.
   * i+R[9]Cs this a proposed task, a planned task, an actionable task,
   * etc.
   */
  readonly intent?: string;

  /**
   * Indicates how quickly the Task should be addressed with respect to
   * other requests.
   */
  readonly priority?: string;

  /**
   * A name or code (or both) briefly describing what the task involves.
   */
  readonly code?: CodeableConcept;

  /**
   * A free-text description of what is to be performed.
   */
  readonly description?: string;

  /**
   * The request being actioned or the resource being manipulated by this
   * task.
   */
  readonly focus?: Reference;

  /**
   * The entity who benefits from the performance of the service specified
   * in the task (e.g., the patient).
   */
  readonly for?: Reference;

  /**
   * The healthcare event  (e.g. a patient and healthcare provider
   * interaction) during which this task was created.
   */
  readonly encounter?: Reference;

  /**
   * Identifies the time action was first taken against the task (start)
   * and/or the time final action was taken against the task prior to
   * marking it as completed (end).
   */
  readonly executionPeriod?: Period;

  /**
   * The date and time this task was created.
   */
  readonly authoredOn?: Date | string;

  /**
   * The date and time of last modification to this task.
   */
  readonly lastModified?: Date | string;

  /**
   * The creator of the task.
   */
  readonly requester?: Reference;

  /**
   * The kind of participant that should perform the task.
   */
  readonly performerType?: CodeableConcept[];

  /**
   * Individual organization or Device currently responsible for task
   * execution.
   */
  readonly owner?: Reference;

  /**
   * Principal physical location where the this task is performed.
   */
  readonly location?: Reference;

  /**
   * A description or code indicating why this task needs to be performed.
   */
  readonly reasonCode?: CodeableConcept;

  /**
   * A resource reference indicating why this task needs to be performed.
   */
  readonly reasonReference?: Reference;

  /**
   * Insurance plans, coverage extensions, pre-authorizations and/or
   * pre-determinations that may be relevant to the Task.
   */
  readonly insurance?: Reference[];

  /**
   * Free-text information captured about the task as it progresses.
   */
  readonly note?: Annotation[];

  /**
   * Links to Provenance records for past versions of this Task that
   * identify key state transitions or updates that are likely to be
   * relevant to a user looking at the current version of the task.
   */
  readonly relevantHistory?: Reference[];

  /**
   * If the Task.focus is a request resource and the task is seeking
   * fulfillment (i.e. is asking for the request to be actioned), this
   * element identifies any limitations on what parts of the referenced
   * request should be actioned.
   */
  readonly restriction?: TaskRestriction;

  /**
   * Additional information that may be needed in the execution of the
   * task.
   */
  readonly input?: TaskInput[];

  /**
   * Outputs produced by the Task.
   */
  readonly output?: TaskOutput[];
}

/**
 * A task to be performed.
 */
export interface TaskInput {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * A code or description indicating how the input is intended to be used
   * as part of the task execution.
   */
  readonly type?: CodeableConcept;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueBase64Binary?: string;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueBoolean?: boolean;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueCanonical?: string;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueCode?: string;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueDate?: string;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueDateTime?: string;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueDecimal?: number;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueId?: string;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueInstant?: string;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueInteger?: number;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueMarkdown?: string;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueOid?: string;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valuePositiveInt?: number;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueString?: string;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueTime?: string;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueUnsignedInt?: number;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueUri?: string;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueUrl?: string;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueUuid?: string;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueAddress?: Address;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueAge?: Age;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueAnnotation?: Annotation;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueAttachment?: Attachment;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueCodeableConcept?: CodeableConcept;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueCoding?: Coding;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueContactPoint?: ContactPoint;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueCount?: Count;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueDistance?: Distance;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueDuration?: Duration;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueHumanName?: HumanName;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueIdentifier?: Identifier;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueMoney?: Money;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valuePeriod?: Period;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueQuantity?: Quantity;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueRange?: Range;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueRatio?: Ratio;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueReference?: Reference;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueSampledData?: SampledData;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueSignature?: Signature;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueTiming?: Timing;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueContactDetail?: ContactDetail;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueContributor?: Contributor;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueDataRequirement?: DataRequirement;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueExpression?: Expression;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueParameterDefinition?: ParameterDefinition;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueRelatedArtifact?: RelatedArtifact;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueTriggerDefinition?: TriggerDefinition;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueUsageContext?: UsageContext;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueDosage?: Dosage;

  /**
   * The value of the input parameter as a basic type.
   */
  readonly valueMeta?: Meta;
}

/**
 * A task to be performed.
 */
export interface TaskOutput {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * The name of the Output parameter.
   */
  readonly type?: CodeableConcept;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueBase64Binary?: string;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueBoolean?: boolean;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueCanonical?: string;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueCode?: string;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueDate?: string;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueDateTime?: string;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueDecimal?: number;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueId?: string;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueInstant?: string;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueInteger?: number;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueMarkdown?: string;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueOid?: string;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valuePositiveInt?: number;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueString?: string;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueTime?: string;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueUnsignedInt?: number;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueUri?: string;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueUrl?: string;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueUuid?: string;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueAddress?: Address;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueAge?: Age;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueAnnotation?: Annotation;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueAttachment?: Attachment;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueCodeableConcept?: CodeableConcept;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueCoding?: Coding;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueContactPoint?: ContactPoint;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueCount?: Count;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueDistance?: Distance;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueDuration?: Duration;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueHumanName?: HumanName;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueIdentifier?: Identifier;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueMoney?: Money;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valuePeriod?: Period;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueQuantity?: Quantity;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueRange?: Range;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueRatio?: Ratio;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueReference?: Reference;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueSampledData?: SampledData;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueSignature?: Signature;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueTiming?: Timing;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueContactDetail?: ContactDetail;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueContributor?: Contributor;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueDataRequirement?: DataRequirement;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueExpression?: Expression;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueParameterDefinition?: ParameterDefinition;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueRelatedArtifact?: RelatedArtifact;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueTriggerDefinition?: TriggerDefinition;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueUsageContext?: UsageContext;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueDosage?: Dosage;

  /**
   * The value of the Output parameter as a basic type.
   */
  readonly valueMeta?: Meta;
}

/**
 * A task to be performed.
 */
export interface TaskRestriction {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * Indicates the number of times the requested action should occur.
   */
  readonly repetitions?: number;

  /**
   * Over what time-period is fulfillment sought.
   */
  readonly period?: Period;

  /**
   * For requests that are targeted to more than on potential
   * recipient/target, for whom is fulfillment sought?
   */
  readonly recipient?: Reference[];
}
