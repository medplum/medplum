/*
 * Generated by @medplum/generator
 * Do not edit manually.
 */

import { Attachment } from './Attachment';
import { CodeableConcept } from './CodeableConcept';
import { DocumentReference } from './DocumentReference';
import { Extension } from './Extension';
import { Identifier } from './Identifier';
import { Meta } from './Meta';
import { Narrative } from './Narrative';
import { Quantity } from './Quantity';
import { Range } from './Range';
import { Ratio } from './Ratio';
import { Reference } from './Reference';
import { Resource } from './Resource';
import { Substance } from './Substance';
import { SubstanceNucleicAcid } from './SubstanceNucleicAcid';
import { SubstancePolymer } from './SubstancePolymer';
import { SubstanceProtein } from './SubstanceProtein';
import { SubstanceReferenceInformation } from './SubstanceReferenceInformation';
import { SubstanceSourceMaterial } from './SubstanceSourceMaterial';

/**
 * The detailed description of a substance, typically at a level beyond
 * what is used for prescribing.
 */
export interface SubstanceSpecification {

  /**
   * This is a SubstanceSpecification resource
   */
  readonly resourceType: 'SubstanceSpecification';

  /**
   * The logical id of the resource, as used in the URL for the resource.
   * Once assigned, this value never changes.
   */
  readonly id?: string;

  /**
   * The metadata about the resource. This is content that is maintained by
   * the infrastructure. Changes to the content might not always be
   * associated with version changes to the resource.
   */
  readonly meta?: Meta;

  /**
   * A reference to a set of rules that were followed when the resource was
   * constructed, and which must be understood when processing the content.
   * Often, this is a reference to an implementation guide that defines the
   * special rules along with other profiles etc.
   */
  readonly implicitRules?: string;

  /**
   * The base language in which the resource is written.
   */
  readonly language?: string;

  /**
   * A human-readable narrative that contains a summary of the resource and
   * can be used to represent the content of the resource to a human. The
   * narrative need not encode all the structured data, but is required to
   * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
   * just read the narrative. Resource definitions may define what content
   * should be represented in the narrative to ensure clinical safety.
   */
  readonly text?: Narrative;

  /**
   * These resources do not have an independent existence apart from the
   * resource that contains them - they cannot be identified independently,
   * and nor can they have their own independent transaction scope.
   */
  readonly contained?: Resource[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the resource. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the resource and that modifies the
   * understanding of the element that contains it and/or the understanding
   * of the containing element's descendants. Usually modifier elements
   * provide negation or qualification. To make the use of extensions safe
   * and manageable, there is a strict set of governance applied to the
   * definition and use of extensions. Though any implementer is allowed to
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension. Applications processing a
   * resource are required to check for modifier extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * Identifier by which this substance is known.
   */
  readonly identifier?: Identifier;

  /**
   * High level categorization, e.g. polymer or nucleic acid.
   */
  readonly type?: CodeableConcept;

  /**
   * Status of substance within the catalogue e.g. approved.
   */
  readonly status?: CodeableConcept;

  /**
   * If the substance applies to only human or veterinary use.
   */
  readonly domain?: CodeableConcept;

  /**
   * Textual description of the substance.
   */
  readonly description?: string;

  /**
   * Supporting literature.
   */
  readonly source?: Reference<DocumentReference>[];

  /**
   * Textual comment about this record of a substance.
   */
  readonly comment?: string;

  /**
   * Moiety, for structural modifications.
   */
  readonly moiety?: SubstanceSpecificationMoiety[];

  /**
   * General specifications for this substance, including how it is related
   * to other substances.
   */
  readonly property?: SubstanceSpecificationProperty[];

  /**
   * General information detailing this substance.
   */
  readonly referenceInformation?: Reference<SubstanceReferenceInformation>;

  /**
   * Structural information.
   */
  readonly structure?: SubstanceSpecificationStructure;

  /**
   * Codes associated with the substance.
   */
  readonly code?: SubstanceSpecificationCode[];

  /**
   * Names applicable to this substance.
   */
  readonly name?: SubstanceSpecificationName[];

  /**
   * The molecular weight or weight range (for proteins, polymers or
   * nucleic acids).
   */
  readonly molecularWeight?: SubstanceSpecificationStructureIsotopeMolecularWeight[];

  /**
   * A link between this substance and another, with details of the
   * relationship.
   */
  readonly relationship?: SubstanceSpecificationRelationship[];

  /**
   * Data items specific to nucleic acids.
   */
  readonly nucleicAcid?: Reference<SubstanceNucleicAcid>;

  /**
   * Data items specific to polymers.
   */
  readonly polymer?: Reference<SubstancePolymer>;

  /**
   * Data items specific to proteins.
   */
  readonly protein?: Reference<SubstanceProtein>;

  /**
   * Material or taxonomic/anatomical source for the substance.
   */
  readonly sourceMaterial?: Reference<SubstanceSourceMaterial>;
}

/**
 * Codes associated with the substance.
 */
export interface SubstanceSpecificationCode {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * The specific code.
   */
  readonly code?: CodeableConcept;

  /**
   * Status of the code assignment.
   */
  readonly status?: CodeableConcept;

  /**
   * The date at which the code status is changed as part of the
   * terminology maintenance.
   */
  readonly statusDate?: string;

  /**
   * Any comment can be provided in this field, if necessary.
   */
  readonly comment?: string;

  /**
   * Supporting literature.
   */
  readonly source?: Reference<DocumentReference>[];
}

/**
 * Moiety, for structural modifications.
 */
export interface SubstanceSpecificationMoiety {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * Role that the moiety is playing.
   */
  readonly role?: CodeableConcept;

  /**
   * Identifier by which this moiety substance is known.
   */
  readonly identifier?: Identifier;

  /**
   * Textual name for this moiety substance.
   */
  readonly name?: string;

  /**
   * Stereochemistry type.
   */
  readonly stereochemistry?: CodeableConcept;

  /**
   * Optical activity type.
   */
  readonly opticalActivity?: CodeableConcept;

  /**
   * Molecular formula.
   */
  readonly molecularFormula?: string;

  /**
   * Quantitative value for this moiety.
   */
  readonly amountQuantity?: Quantity;

  /**
   * Quantitative value for this moiety.
   */
  readonly amountString?: string;
}

/**
 * Names applicable to this substance.
 */
export interface SubstanceSpecificationName {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * The actual name.
   */
  readonly name?: string;

  /**
   * Name type.
   */
  readonly type?: CodeableConcept;

  /**
   * The status of the name.
   */
  readonly status?: CodeableConcept;

  /**
   * If this is the preferred name for this substance.
   */
  readonly preferred?: boolean;

  /**
   * Language of the name.
   */
  readonly language?: CodeableConcept[];

  /**
   * The use context of this name for example if there is a different name
   * a drug active ingredient as opposed to a food colour additive.
   */
  readonly domain?: CodeableConcept[];

  /**
   * The jurisdiction where this name applies.
   */
  readonly jurisdiction?: CodeableConcept[];

  /**
   * A synonym of this name.
   */
  readonly synonym?: SubstanceSpecificationName[];

  /**
   * A translation for this name.
   */
  readonly translation?: SubstanceSpecificationName[];

  /**
   * Details of the official nature of this name.
   */
  readonly official?: SubstanceSpecificationNameOfficial[];

  /**
   * Supporting literature.
   */
  readonly source?: Reference<DocumentReference>[];
}

/**
 * Details of the official nature of this name.
 */
export interface SubstanceSpecificationNameOfficial {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * Which authority uses this official name.
   */
  readonly authority?: CodeableConcept;

  /**
   * The status of the official name.
   */
  readonly status?: CodeableConcept;

  /**
   * Date of official name change.
   */
  readonly date?: string;
}

/**
 * General specifications for this substance, including how it is related
 * to other substances.
 */
export interface SubstanceSpecificationProperty {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * A category for this property, e.g. Physical, Chemical, Enzymatic.
   */
  readonly category?: CodeableConcept;

  /**
   * Property type e.g. viscosity, pH, isoelectric point.
   */
  readonly code?: CodeableConcept;

  /**
   * Parameters that were used in the measurement of a property (e.g. for
   * viscosity: measured at 20C with a pH of 7.1).
   */
  readonly parameters?: string;

  /**
   * A substance upon which a defining property depends (e.g. for
   * solubility: in water, in alcohol).
   */
  readonly definingSubstanceReference?: Reference<SubstanceSpecification | Substance>;

  /**
   * A substance upon which a defining property depends (e.g. for
   * solubility: in water, in alcohol).
   */
  readonly definingSubstanceCodeableConcept?: CodeableConcept;

  /**
   * Quantitative value for this property.
   */
  readonly amountQuantity?: Quantity;

  /**
   * Quantitative value for this property.
   */
  readonly amountString?: string;
}

/**
 * A link between this substance and another, with details of the
 * relationship.
 */
export interface SubstanceSpecificationRelationship {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * A pointer to another substance, as a resource or just a
   * representational code.
   */
  readonly substanceReference?: Reference<SubstanceSpecification>;

  /**
   * A pointer to another substance, as a resource or just a
   * representational code.
   */
  readonly substanceCodeableConcept?: CodeableConcept;

  /**
   * For example &quot;salt to parent&quot;, &quot;active moiety&quot;, &quot;starting material&quot;.
   */
  readonly relationship?: CodeableConcept;

  /**
   * For example where an enzyme strongly bonds with a particular
   * substance, this is a defining relationship for that enzyme, out of
   * several possible substance relationships.
   */
  readonly isDefining?: boolean;

  /**
   * A numeric factor for the relationship, for instance to express that
   * the salt of a substance has some percentage of the active substance in
   * relation to some other.
   */
  readonly amountQuantity?: Quantity;

  /**
   * A numeric factor for the relationship, for instance to express that
   * the salt of a substance has some percentage of the active substance in
   * relation to some other.
   */
  readonly amountRange?: Range;

  /**
   * A numeric factor for the relationship, for instance to express that
   * the salt of a substance has some percentage of the active substance in
   * relation to some other.
   */
  readonly amountRatio?: Ratio;

  /**
   * A numeric factor for the relationship, for instance to express that
   * the salt of a substance has some percentage of the active substance in
   * relation to some other.
   */
  readonly amountString?: string;

  /**
   * For use when the numeric.
   */
  readonly amountRatioLowLimit?: Ratio;

  /**
   * An operator for the amount, for example &quot;average&quot;, &quot;approximately&quot;,
   * &quot;less than&quot;.
   */
  readonly amountType?: CodeableConcept;

  /**
   * Supporting literature.
   */
  readonly source?: Reference<DocumentReference>[];
}

/**
 * Structural information.
 */
export interface SubstanceSpecificationStructure {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * Stereochemistry type.
   */
  readonly stereochemistry?: CodeableConcept;

  /**
   * Optical activity type.
   */
  readonly opticalActivity?: CodeableConcept;

  /**
   * Molecular formula.
   */
  readonly molecularFormula?: string;

  /**
   * Specified per moiety according to the Hill system, i.e. first C, then
   * H, then alphabetical, each moiety separated by a dot.
   */
  readonly molecularFormulaByMoiety?: string;

  /**
   * Applicable for single substances that contain a radionuclide or a
   * non-natural isotopic ratio.
   */
  readonly isotope?: SubstanceSpecificationStructureIsotope[];

  /**
   * The molecular weight or weight range (for proteins, polymers or
   * nucleic acids).
   */
  readonly molecularWeight?: SubstanceSpecificationStructureIsotopeMolecularWeight;

  /**
   * Supporting literature.
   */
  readonly source?: Reference<DocumentReference>[];

  /**
   * Molecular structural representation.
   */
  readonly representation?: SubstanceSpecificationStructureRepresentation[];
}

/**
 * Applicable for single substances that contain a radionuclide or a
 * non-natural isotopic ratio.
 */
export interface SubstanceSpecificationStructureIsotope {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * Substance identifier for each non-natural or radioisotope.
   */
  readonly identifier?: Identifier;

  /**
   * Substance name for each non-natural or radioisotope.
   */
  readonly name?: CodeableConcept;

  /**
   * The type of isotopic substitution present in a single substance.
   */
  readonly substitution?: CodeableConcept;

  /**
   * Half life - for a non-natural nuclide.
   */
  readonly halfLife?: Quantity;

  /**
   * The molecular weight or weight range (for proteins, polymers or
   * nucleic acids).
   */
  readonly molecularWeight?: SubstanceSpecificationStructureIsotopeMolecularWeight;
}

/**
 * The molecular weight or weight range (for proteins, polymers or
 * nucleic acids).
 */
export interface SubstanceSpecificationStructureIsotopeMolecularWeight {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * The method by which the molecular weight was determined.
   */
  readonly method?: CodeableConcept;

  /**
   * Type of molecular weight such as exact, average (also known as. number
   * average), weight average.
   */
  readonly type?: CodeableConcept;

  /**
   * Used to capture quantitative values for a variety of elements. If only
   * limits are given, the arithmetic mean would be the average. If only a
   * single definite value for a given element is given, it would be
   * captured in this field.
   */
  readonly amount?: Quantity;
}

/**
 * Molecular structural representation.
 */
export interface SubstanceSpecificationStructureRepresentation {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * The type of structure (e.g. Full, Partial, Representative).
   */
  readonly type?: CodeableConcept;

  /**
   * The structural representation as text string in a format e.g. InChI,
   * SMILES, MOLFILE, CDX.
   */
  readonly representation?: string;

  /**
   * An attached file with the structural representation.
   */
  readonly attachment?: Attachment;
}
