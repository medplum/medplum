/*
 * Generated by @medplum/generator
 * Do not edit manually.
 */

import { CodeableConcept } from './CodeableConcept';
import { Extension } from './Extension';
import { Identifier } from './Identifier';
import { Meta } from './Meta';
import { Narrative } from './Narrative';
import { Reference } from './Reference';
import { Resource } from './Resource';

/**
 * A collection of documents compiled for a purpose together with
 * metadata that applies to the collection.
 */
export interface DocumentManifest {

  /**
   * This is a DocumentManifest resource
   */
  readonly resourceType: 'DocumentManifest';

  /**
   * The logical id of the resource, as used in the URL for the resource.
   * Once assigned, this value never changes.
   */
  readonly id?: string;

  /**
   * The metadata about the resource. This is content that is maintained by
   * the infrastructure. Changes to the content might not always be
   * associated with version changes to the resource.
   */
  readonly meta?: Meta;

  /**
   * A reference to a set of rules that were followed when the resource was
   * constructed, and which must be understood when processing the content.
   * Often, this is a reference to an implementation guide that defines the
   * special rules along with other profiles etc.
   */
  readonly implicitRules?: string;

  /**
   * The base language in which the resource is written.
   */
  readonly language?: string;

  /**
   * A human-readable narrative that contains a summary of the resource and
   * can be used to represent the content of the resource to a human. The
   * narrative need not encode all the structured data, but is required to
   * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
   * just read the narrative. Resource definitions may define what content
   * should be represented in the narrative to ensure clinical safety.
   */
  readonly text?: Narrative;

  /**
   * These resources do not have an independent existence apart from the
   * resource that contains them - they cannot be identified independently,
   * and nor can they have their own independent transaction scope.
   */
  readonly contained?: Resource[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the resource. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the resource and that modifies the
   * understanding of the element that contains it and/or the understanding
   * of the containing element's descendants. Usually modifier elements
   * provide negation or qualification. To make the use of extensions safe
   * and manageable, there is a strict set of governance applied to the
   * definition and use of extensions. Though any implementer is allowed to
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension. Applications processing a
   * resource are required to check for modifier extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * A single identifier that uniquely identifies this manifest.
   * Principally used to refer to the manifest in non-FHIR contexts.
   */
  readonly masterIdentifier?: Identifier;

  /**
   * Other identifiers associated with the document manifest, including
   * version independent  identifiers.
   */
  readonly identifier?: Identifier[];

  /**
   * The status of this document manifest.
   */
  readonly status?: string;

  /**
   * The code specifying the type of clinical activity that resulted in
   * placing the associated content into the DocumentManifest.
   */
  readonly type?: CodeableConcept;

  /**
   * Who or what the set of documents is about. The documents can be about
   * a person, (patient or healthcare practitioner), a device (i.e.
   * machine) or even a group of subjects (such as a document about a herd
   * of farm animals, or a set of patients that share a common exposure).
   * If the documents cross more than one subject, then more than one
   * subject is allowed here (unusual use case).
   */
  readonly subject?: Reference;

  /**
   * When the document manifest was created for submission to the server
   * (not necessarily the same thing as the actual resource last modified
   * time, since it may be modified, replicated, etc.).
   */
  readonly created?: string;

  /**
   * Identifies who is the author of the manifest. Manifest author is not
   * necessarly the author of the references included.
   */
  readonly author?: Reference[];

  /**
   * A patient, practitioner, or organization for which this set of
   * documents is intended.
   */
  readonly recipient?: Reference[];

  /**
   * Identifies the source system, application, or software that produced
   * the document manifest.
   */
  readonly source?: string;

  /**
   * Human-readable description of the source document. This is sometimes
   * known as the &quot;title&quot;.
   */
  readonly description?: string;

  /**
   * The list of Resources that consist of the parts of this manifest.
   */
  readonly content?: Reference[];

  /**
   * Related identifiers or resources associated with the DocumentManifest.
   */
  readonly related?: DocumentManifestRelated[];
}

/**
 * Related identifiers or resources associated with the DocumentManifest.
 */
export interface DocumentManifestRelated {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * Related identifier to this DocumentManifest.  For example, Order
   * numbers, accession numbers, XDW workflow numbers.
   */
  readonly identifier?: Identifier;

  /**
   * Related Resource to this DocumentManifest. For example, Order,
   * ServiceRequest,  Procedure, EligibilityRequest, etc.
   */
  readonly ref?: Reference;
}
