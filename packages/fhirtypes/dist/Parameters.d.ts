/*
 * Generated by @medplum/generator
 * Do not edit manually.
 */

import { Address } from './Address';
import { Age } from './Age';
import { Annotation } from './Annotation';
import { Attachment } from './Attachment';
import { CodeableConcept } from './CodeableConcept';
import { Coding } from './Coding';
import { ContactDetail } from './ContactDetail';
import { ContactPoint } from './ContactPoint';
import { Contributor } from './Contributor';
import { Count } from './Count';
import { DataRequirement } from './DataRequirement';
import { Distance } from './Distance';
import { Dosage } from './Dosage';
import { Duration } from './Duration';
import { Expression } from './Expression';
import { Extension } from './Extension';
import { HumanName } from './HumanName';
import { Identifier } from './Identifier';
import { Meta } from './Meta';
import { Money } from './Money';
import { ParameterDefinition } from './ParameterDefinition';
import { Period } from './Period';
import { Quantity } from './Quantity';
import { Range } from './Range';
import { Ratio } from './Ratio';
import { Reference } from './Reference';
import { RelatedArtifact } from './RelatedArtifact';
import { Resource } from './Resource';
import { SampledData } from './SampledData';
import { Signature } from './Signature';
import { Timing } from './Timing';
import { TriggerDefinition } from './TriggerDefinition';
import { UsageContext } from './UsageContext';

/**
 * This resource is a non-persisted resource used to pass information
 * into and back from an [operation](operations.html). It has no other
 * use, and there is no RESTful endpoint associated with it.
 */
export interface Parameters {

  /**
   * This is a Parameters resource
   */
  readonly resourceType: 'Parameters';

  /**
   * The logical id of the resource, as used in the URL for the resource.
   * Once assigned, this value never changes.
   */
  readonly id?: string;

  /**
   * The metadata about the resource. This is content that is maintained by
   * the infrastructure. Changes to the content might not always be
   * associated with version changes to the resource.
   */
  readonly meta?: Meta;

  /**
   * A reference to a set of rules that were followed when the resource was
   * constructed, and which must be understood when processing the content.
   * Often, this is a reference to an implementation guide that defines the
   * special rules along with other profiles etc.
   */
  readonly implicitRules?: string;

  /**
   * The base language in which the resource is written.
   */
  readonly language?: string;

  /**
   * A parameter passed to or received from the operation.
   */
  readonly parameter?: ParametersParameter[];
}

/**
 * A parameter passed to or received from the operation.
 */
export interface ParametersParameter {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * The name of the parameter (reference to the operation definition).
   */
  readonly name?: string;

  /**
   * If the parameter is a data type.
   */
  readonly valueBase64Binary?: string;

  /**
   * If the parameter is a data type.
   */
  readonly valueBoolean?: boolean;

  /**
   * If the parameter is a data type.
   */
  readonly valueCanonical?: string;

  /**
   * If the parameter is a data type.
   */
  readonly valueCode?: string;

  /**
   * If the parameter is a data type.
   */
  readonly valueDate?: string;

  /**
   * If the parameter is a data type.
   */
  readonly valueDateTime?: string;

  /**
   * If the parameter is a data type.
   */
  readonly valueDecimal?: number;

  /**
   * If the parameter is a data type.
   */
  readonly valueId?: string;

  /**
   * If the parameter is a data type.
   */
  readonly valueInstant?: string;

  /**
   * If the parameter is a data type.
   */
  readonly valueInteger?: number;

  /**
   * If the parameter is a data type.
   */
  readonly valueMarkdown?: string;

  /**
   * If the parameter is a data type.
   */
  readonly valueOid?: string;

  /**
   * If the parameter is a data type.
   */
  readonly valuePositiveInt?: number;

  /**
   * If the parameter is a data type.
   */
  readonly valueString?: string;

  /**
   * If the parameter is a data type.
   */
  readonly valueTime?: string;

  /**
   * If the parameter is a data type.
   */
  readonly valueUnsignedInt?: number;

  /**
   * If the parameter is a data type.
   */
  readonly valueUri?: string;

  /**
   * If the parameter is a data type.
   */
  readonly valueUrl?: string;

  /**
   * If the parameter is a data type.
   */
  readonly valueUuid?: string;

  /**
   * If the parameter is a data type.
   */
  readonly valueAddress?: Address;

  /**
   * If the parameter is a data type.
   */
  readonly valueAge?: Age;

  /**
   * If the parameter is a data type.
   */
  readonly valueAnnotation?: Annotation;

  /**
   * If the parameter is a data type.
   */
  readonly valueAttachment?: Attachment;

  /**
   * If the parameter is a data type.
   */
  readonly valueCodeableConcept?: CodeableConcept;

  /**
   * If the parameter is a data type.
   */
  readonly valueCoding?: Coding;

  /**
   * If the parameter is a data type.
   */
  readonly valueContactPoint?: ContactPoint;

  /**
   * If the parameter is a data type.
   */
  readonly valueCount?: Count;

  /**
   * If the parameter is a data type.
   */
  readonly valueDistance?: Distance;

  /**
   * If the parameter is a data type.
   */
  readonly valueDuration?: Duration;

  /**
   * If the parameter is a data type.
   */
  readonly valueHumanName?: HumanName;

  /**
   * If the parameter is a data type.
   */
  readonly valueIdentifier?: Identifier;

  /**
   * If the parameter is a data type.
   */
  readonly valueMoney?: Money;

  /**
   * If the parameter is a data type.
   */
  readonly valuePeriod?: Period;

  /**
   * If the parameter is a data type.
   */
  readonly valueQuantity?: Quantity;

  /**
   * If the parameter is a data type.
   */
  readonly valueRange?: Range;

  /**
   * If the parameter is a data type.
   */
  readonly valueRatio?: Ratio;

  /**
   * If the parameter is a data type.
   */
  readonly valueReference?: Reference;

  /**
   * If the parameter is a data type.
   */
  readonly valueSampledData?: SampledData;

  /**
   * If the parameter is a data type.
   */
  readonly valueSignature?: Signature;

  /**
   * If the parameter is a data type.
   */
  readonly valueTiming?: Timing;

  /**
   * If the parameter is a data type.
   */
  readonly valueContactDetail?: ContactDetail;

  /**
   * If the parameter is a data type.
   */
  readonly valueContributor?: Contributor;

  /**
   * If the parameter is a data type.
   */
  readonly valueDataRequirement?: DataRequirement;

  /**
   * If the parameter is a data type.
   */
  readonly valueExpression?: Expression;

  /**
   * If the parameter is a data type.
   */
  readonly valueParameterDefinition?: ParameterDefinition;

  /**
   * If the parameter is a data type.
   */
  readonly valueRelatedArtifact?: RelatedArtifact;

  /**
   * If the parameter is a data type.
   */
  readonly valueTriggerDefinition?: TriggerDefinition;

  /**
   * If the parameter is a data type.
   */
  readonly valueUsageContext?: UsageContext;

  /**
   * If the parameter is a data type.
   */
  readonly valueDosage?: Dosage;

  /**
   * If the parameter is a data type.
   */
  readonly valueMeta?: Meta;

  /**
   * If the parameter is a whole resource.
   */
  readonly resource?: Resource;

  /**
   * A named part of a multi-part parameter.
   */
  readonly part?: ParametersParameter[];
}
