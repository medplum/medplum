/*
 * Generated by @medplum/generator
 * Do not edit manually.
 */

import { Attachment } from './Attachment';
import { CodeableConcept } from './CodeableConcept';
import { Identifier } from './Identifier';
import { Meta } from './Meta';
import { Timing } from './Timing';

/**
 * Bot account for automated actions.
 */
export interface Bot {

  /**
   * This is a Bot resource
   */
  readonly resourceType: 'Bot';

  /**
   * The logical id of the resource, as used in the URL for the resource.
   * Once assigned, this value never changes.
   */
  id?: string;

  /**
   * The metadata about the resource. This is content that is maintained by
   * the infrastructure. Changes to the content might not always be
   * associated with version changes to the resource.
   */
  meta?: Meta;

  /**
   * A reference to a set of rules that were followed when the resource was
   * constructed, and which must be understood when processing the content.
   * Often, this is a reference to an implementation guide that defines the
   * special rules along with other profiles etc.
   */
  implicitRules?: string;

  /**
   * The base language in which the resource is written.
   */
  language?: string;

  /**
   * An identifier for this bot.
   */
  identifier?: Identifier[];

  /**
   * A name associated with the Bot.
   */
  name?: string;

  /**
   * A summary, characterization or explanation of the Bot.
   */
  description?: string;

  /**
   * The identifier of the bot runtime environment (i.e., vmcontext,
   * awslambda, etc).
   */
  runtimeVersion?: 'awslambda' | 'vmcontext';

  /**
   * Image of the bot.
   */
  photo?: Attachment;

  /**
   * A schedule for the bot to be executed.
   */
  cronTiming?: Timing;

  /**
   * A schedule for the bot to be executed.
   */
  cronString?: string;

  /**
   * A code that classifies the service for searching, sorting and display
   * purposes (e.g. &quot;Surgical Procedure&quot;).
   */
  category?: CodeableConcept[];

  /**
   * Optional flag to indicate that the bot should be run as the user.
   */
  runAsUser?: boolean;

  /**
   * Criteria for creating an AuditEvent as a result of the bot invocation.
   * Possible values are 'always', 'never', 'on-error', or 'on-output'.
   * Default value is 'always'.
   */
  auditEventTrigger?: 'always' | 'never' | 'on-error' | 'on-output';

  /**
   * The destination system in which the AuditEvent is to be sent. Possible
   * values are 'log' or 'resource'. Default value is 'resource'.
   */
  auditEventDestination?: ('log' | 'resource')[];

  /**
   * Bot logic in original source code form written by developers.
   */
  sourceCode?: Attachment;

  /**
   * Bot logic in executable form as a result of compiling and bundling
   * source code.
   */
  executableCode?: Attachment;

  /**
   * DEPRECATED Bot logic script. Use Bot.sourceCode or Bot.executableCode
   * instead.
   */
  code?: string;
}
