/*
 * Generated by @medplum/generator
 * Do not edit manually.
 */

import { Address } from './Address';
import { Age } from './Age';
import { Annotation } from './Annotation';
import { Attachment } from './Attachment';
import { CodeableConcept } from './CodeableConcept';
import { Coding } from './Coding';
import { ContactDetail } from './ContactDetail';
import { ContactPoint } from './ContactPoint';
import { Contributor } from './Contributor';
import { Count } from './Count';
import { DataRequirement } from './DataRequirement';
import { Distance } from './Distance';
import { Dosage } from './Dosage';
import { Duration } from './Duration';
import { Expression } from './Expression';
import { Extension } from './Extension';
import { HumanName } from './HumanName';
import { Identifier } from './Identifier';
import { Meta } from './Meta';
import { Money } from './Money';
import { Narrative } from './Narrative';
import { ParameterDefinition } from './ParameterDefinition';
import { Period } from './Period';
import { Quantity } from './Quantity';
import { Range } from './Range';
import { Ratio } from './Ratio';
import { Reference } from './Reference';
import { RelatedArtifact } from './RelatedArtifact';
import { Resource } from './Resource';
import { SampledData } from './SampledData';
import { Signature } from './Signature';
import { Timing } from './Timing';
import { TriggerDefinition } from './TriggerDefinition';
import { UsageContext } from './UsageContext';

/**
 * A Map of relationships between 2 structures that can be used to
 * transform data.
 */
export interface StructureMap {

  /**
   * This is a StructureMap resource
   */
  readonly resourceType: 'StructureMap';

  /**
   * The logical id of the resource, as used in the URL for the resource.
   * Once assigned, this value never changes.
   */
  readonly id?: string;

  /**
   * The metadata about the resource. This is content that is maintained by
   * the infrastructure. Changes to the content might not always be
   * associated with version changes to the resource.
   */
  readonly meta?: Meta;

  /**
   * A reference to a set of rules that were followed when the resource was
   * constructed, and which must be understood when processing the content.
   * Often, this is a reference to an implementation guide that defines the
   * special rules along with other profiles etc.
   */
  readonly implicitRules?: string;

  /**
   * The base language in which the resource is written.
   */
  readonly language?: string;

  /**
   * A human-readable narrative that contains a summary of the resource and
   * can be used to represent the content of the resource to a human. The
   * narrative need not encode all the structured data, but is required to
   * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
   * just read the narrative. Resource definitions may define what content
   * should be represented in the narrative to ensure clinical safety.
   */
  readonly text?: Narrative;

  /**
   * These resources do not have an independent existence apart from the
   * resource that contains them - they cannot be identified independently,
   * and nor can they have their own independent transaction scope.
   */
  readonly contained?: Resource[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the resource. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the resource and that modifies the
   * understanding of the element that contains it and/or the understanding
   * of the containing element's descendants. Usually modifier elements
   * provide negation or qualification. To make the use of extensions safe
   * and manageable, there is a strict set of governance applied to the
   * definition and use of extensions. Though any implementer is allowed to
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension. Applications processing a
   * resource are required to check for modifier extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * An absolute URI that is used to identify this structure map when it is
   * referenced in a specification, model, design or an instance; also
   * called its canonical identifier. This SHOULD be globally unique and
   * SHOULD be a literal address at which at which an authoritative
   * instance of this structure map is (or will be) published. This URL can
   * be the target of a canonical reference. It SHALL remain the same when
   * the structure map is stored on different servers.
   */
  readonly url?: string;

  /**
   * A formal identifier that is used to identify this structure map when
   * it is represented in other formats, or referenced in a specification,
   * model, design or an instance.
   */
  readonly identifier?: Identifier[];

  /**
   * The identifier that is used to identify this version of the structure
   * map when it is referenced in a specification, model, design or
   * instance. This is an arbitrary value managed by the structure map
   * author and is not expected to be globally unique. For example, it
   * might be a timestamp (e.g. yyyymmdd) if a managed version is not
   * available. There is also no expectation that versions can be placed in
   * a lexicographical sequence.
   */
  readonly version?: string;

  /**
   * A natural language name identifying the structure map. This name
   * should be usable as an identifier for the module by machine processing
   * applications such as code generation.
   */
  readonly name?: string;

  /**
   * A short, descriptive, user-friendly title for the structure map.
   */
  readonly title?: string;

  /**
   * The status of this structure map. Enables tracking the life-cycle of
   * the content.
   */
  readonly status?: string;

  /**
   * A Boolean value to indicate that this structure map is authored for
   * testing purposes (or education/evaluation/marketing) and is not
   * intended to be used for genuine usage.
   */
  readonly experimental?: boolean;

  /**
   * The date  (and optionally time) when the structure map was published.
   * The date must change when the business version changes and it must
   * change if the status code changes. In addition, it should change when
   * the substantive content of the structure map changes.
   */
  readonly date?: string;

  /**
   * The name of the organization or individual that published the
   * structure map.
   */
  readonly publisher?: string;

  /**
   * Contact details to assist a user in finding and communicating with the
   * publisher.
   */
  readonly contact?: ContactDetail[];

  /**
   * A free text natural language description of the structure map from a
   * consumer's perspective.
   */
  readonly description?: string;

  /**
   * The content was developed with a focus and intent of supporting the
   * contexts that are listed. These contexts may be general categories
   * (gender, age, ...) or may be references to specific programs
   * (insurance plans, studies, ...) and may be used to assist with
   * indexing and searching for appropriate structure map instances.
   */
  readonly useContext?: UsageContext[];

  /**
   * A legal or geographic region in which the structure map is intended to
   * be used.
   */
  readonly jurisdiction?: CodeableConcept[];

  /**
   * Explanation of why this structure map is needed and why it has been
   * designed as it has.
   */
  readonly purpose?: string;

  /**
   * A copyright statement relating to the structure map and/or its
   * contents. Copyright statements are generally legal restrictions on the
   * use and publishing of the structure map.
   */
  readonly copyright?: string;

  /**
   * A structure definition used by this map. The structure definition may
   * describe instances that are converted, or the instances that are
   * produced.
   */
  readonly structure?: StructureMapStructure[];

  /**
   * Other maps used by this map (canonical URLs).
   */
  readonly import?: string[];

  /**
   * Organizes the mapping into manageable chunks for human review/ease of
   * maintenance.
   */
  readonly group?: StructureMapGroup[];
}

/**
 * Organizes the mapping into manageable chunks for human review/ease of
 * maintenance.
 */
export interface StructureMapGroup {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * A unique name for the group for the convenience of human readers.
   */
  readonly name?: string;

  /**
   * Another group that this group adds rules to.
   */
  readonly extends?: string;

  /**
   * If this is the default rule set to apply for the source type or this
   * combination of types.
   */
  readonly typeMode?: string;

  /**
   * Additional supporting documentation that explains the purpose of the
   * group and the types of mappings within it.
   */
  readonly documentation?: string;

  /**
   * A name assigned to an instance of data. The instance must be provided
   * when the mapping is invoked.
   */
  readonly input?: StructureMapGroupInput[];

  /**
   * Transform Rule from source to target.
   */
  readonly rule?: StructureMapGroupRule[];
}

/**
 * A name assigned to an instance of data. The instance must be provided
 * when the mapping is invoked.
 */
export interface StructureMapGroupInput {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * Name for this instance of data.
   */
  readonly name?: string;

  /**
   * Type for this instance of data.
   */
  readonly type?: string;

  /**
   * Mode for this instance of data.
   */
  readonly mode?: string;

  /**
   * Documentation for this instance of data.
   */
  readonly documentation?: string;
}

/**
 * Transform Rule from source to target.
 */
export interface StructureMapGroupRule {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * Name of the rule for internal references.
   */
  readonly name?: string;

  /**
   * Source inputs to the mapping.
   */
  readonly source?: StructureMapGroupRuleSource[];

  /**
   * Content to create because of this mapping rule.
   */
  readonly target?: StructureMapGroupRuleTarget[];

  /**
   * Rules contained in this rule.
   */
  readonly rule?: StructureMapGroupRule[];

  /**
   * Which other rules to apply in the context of this rule.
   */
  readonly dependent?: StructureMapGroupRuleDependent[];

  /**
   * Documentation for this instance of data.
   */
  readonly documentation?: string;
}

/**
 * Which other rules to apply in the context of this rule.
 */
export interface StructureMapGroupRuleDependent {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * Name of a rule or group to apply.
   */
  readonly name?: string;

  /**
   * Variable to pass to the rule or group.
   */
  readonly variable?: string[];
}

/**
 * Source inputs to the mapping.
 */
export interface StructureMapGroupRuleSource {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * Type or variable this rule applies to.
   */
  readonly context?: string;

  /**
   * Specified minimum cardinality for the element. This is optional; if
   * present, it acts an implicit check on the input content.
   */
  readonly min?: number;

  /**
   * Specified maximum cardinality for the element - a number or a &quot;*&quot;.
   * This is optional; if present, it acts an implicit check on the input
   * content (* just serves as documentation; it's the default value).
   */
  readonly max?: string;

  /**
   * Specified type for the element. This works as a condition on the
   * mapping - use for polymorphic elements.
   */
  readonly type?: string;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueBase64Binary?: string;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueBoolean?: boolean;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueCanonical?: string;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueCode?: string;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueDate?: string;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueDateTime?: string;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueDecimal?: number;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueId?: string;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueInstant?: string;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueInteger?: number;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueMarkdown?: string;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueOid?: string;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValuePositiveInt?: number;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueString?: string;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueTime?: string;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueUnsignedInt?: number;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueUri?: string;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueUrl?: string;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueUuid?: string;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueAddress?: Address;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueAge?: Age;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueAnnotation?: Annotation;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueAttachment?: Attachment;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueCodeableConcept?: CodeableConcept;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueCoding?: Coding;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueContactPoint?: ContactPoint;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueCount?: Count;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueDistance?: Distance;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueDuration?: Duration;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueHumanName?: HumanName;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueIdentifier?: Identifier;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueMoney?: Money;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValuePeriod?: Period;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueQuantity?: Quantity;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueRange?: Range;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueRatio?: Ratio;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueReference?: Reference;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueSampledData?: SampledData;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueSignature?: Signature;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueTiming?: Timing;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueContactDetail?: ContactDetail;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueContributor?: Contributor;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueDataRequirement?: DataRequirement;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueExpression?: Expression;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueParameterDefinition?: ParameterDefinition;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueRelatedArtifact?: RelatedArtifact;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueTriggerDefinition?: TriggerDefinition;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueUsageContext?: UsageContext;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueDosage?: Dosage;

  /**
   * A value to use if there is no existing value in the source object.
   */
  readonly defaultValueMeta?: Meta;

  /**
   * Optional field for this source.
   */
  readonly element?: string;

  /**
   * How to handle the list mode for this element.
   */
  readonly listMode?: string;

  /**
   * Named context for field, if a field is specified.
   */
  readonly variable?: string;

  /**
   * FHIRPath expression  - must be true or the rule does not apply.
   */
  readonly condition?: string;

  /**
   * FHIRPath expression  - must be true or the mapping engine throws an
   * error instead of completing.
   */
  readonly check?: string;

  /**
   * A FHIRPath expression which specifies a message to put in the
   * transform log when content matching the source rule is found.
   */
  readonly logMessage?: string;
}

/**
 * Content to create because of this mapping rule.
 */
export interface StructureMapGroupRuleTarget {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * Type or variable this rule applies to.
   */
  readonly context?: string;

  /**
   * How to interpret the context.
   */
  readonly contextType?: string;

  /**
   * Field to create in the context.
   */
  readonly element?: string;

  /**
   * Named context for field, if desired, and a field is specified.
   */
  readonly variable?: string;

  /**
   * If field is a list, how to manage the list.
   */
  readonly listMode?: string[];

  /**
   * Internal rule reference for shared list items.
   */
  readonly listRuleId?: string;

  /**
   * How the data is copied / created.
   */
  readonly transform?: string;

  /**
   * Parameters to the transform.
   */
  readonly parameter?: StructureMapGroupRuleTargetParameter[];
}

/**
 * Parameters to the transform.
 */
export interface StructureMapGroupRuleTargetParameter {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * Parameter value - variable or literal.
   */
  readonly valueId?: string;

  /**
   * Parameter value - variable or literal.
   */
  readonly valueString?: string;

  /**
   * Parameter value - variable or literal.
   */
  readonly valueBoolean?: boolean;

  /**
   * Parameter value - variable or literal.
   */
  readonly valueInteger?: number;

  /**
   * Parameter value - variable or literal.
   */
  readonly valueDecimal?: number;
}

/**
 * A structure definition used by this map. The structure definition may
 * describe instances that are converted, or the instances that are
 * produced.
 */
export interface StructureMapStructure {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  readonly id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  readonly extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  readonly modifierExtension?: Extension[];

  /**
   * The canonical reference to the structure.
   */
  readonly url?: string;

  /**
   * How the referenced structure is used in this mapping.
   */
  readonly mode?: string;

  /**
   * The name used for this type in the map.
   */
  readonly alias?: string;

  /**
   * Documentation that describes how the structure is used in the mapping.
   */
  readonly documentation?: string;
}
