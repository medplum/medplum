{
  "resourceType": "Bundle",
  "type": "transaction",
  "entry": [
    {
      "fullUrl": "urn:uuid:146feddc-7915-4ab3-800d-c98e312116cd",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/typescript",
        "data": "aW1wb3J0IHsgQm90RXZlbnQsIGdldFJlZmVyZW5jZVN0cmluZywgTWVkcGx1bUNsaWVudCB9IGZyb20gJ0BtZWRwbHVtL2NvcmUnOwppbXBvcnQgeyBEaWFnbm9zdGljUmVwb3J0LCBUYXNrIH0gZnJvbSAnQG1lZHBsdW0vZmhpcnR5cGVzJzsKCmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKG1lZHBsdW06IE1lZHBsdW1DbGllbnQsIGV2ZW50OiBCb3RFdmVudDxEaWFnbm9zdGljUmVwb3J0Pik6IFByb21pc2U8Ym9vbGVhbj4gewogIGNvbnN0IHJlcG9ydCA9IGV2ZW50LmlucHV0IGFzIERpYWdub3N0aWNSZXBvcnQ7CgogIGlmIChyZXBvcnQuc3RhdHVzICE9PSAncHJlbGltaW5hcnknKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgaW5wdXQuIERpYWdub3N0aWNSZXBvcnQgbm90IGluIHByZWxpbWluYXJ5IHN0YXR1cycpOwogIH0KCiAgY29uc3QgdGFzazogVGFzayA9IHsKICAgIHJlc291cmNlVHlwZTogJ1Rhc2snLAogICAgY29kZTogewogICAgICB0ZXh0OiAnUmV2aWV3IERpYWdub3N0aWMgUmVwb3J0JywKICAgIH0sCiAgICBzdGF0dXM6ICdyZWFkeScsCiAgICBpbnRlbnQ6ICdvcmRlcicsCiAgICBmb2N1czogewogICAgICAvLyBUaGUgZm9jdXMgb2YgdGhlIHJlc291cmNlIHdpbGwgYmUgdGhlIERpYWdub3N0aWNSZXBvcnQKICAgICAgcmVmZXJlbmNlOiBnZXRSZWZlcmVuY2VTdHJpbmcocmVwb3J0KSwKICAgIH0sCiAgICBmb3I6IHJlcG9ydC5zdWJqZWN0LAogICAgLy8gVGhlIHBlcmZvcm1lciB0eXBlIGlzIGEgbWVkaWNhbCBwcmFjdGl0aW9uZXIuIFRoaXMgd2lsbCBlbnN1cmUgaXQgaXMgYXNzaWduZWQgdG8gdGhlIGNvcnJlY3QgcXVldWUgc28gYSBkb2N0b3IgY2FuIHJldmlldyBpdC4KICAgIHBlcmZvcm1lclR5cGU6IFsKICAgICAgewogICAgICAgIGNvZGluZzogWwogICAgICAgICAgewogICAgICAgICAgICBzeXN0ZW06ICdodHRwOi8vc25vbWVkLmluZm8vc2N0JywKICAgICAgICAgICAgY29kZTogJzE1ODk2NTAwMCcsCiAgICAgICAgICAgIGRpc3BsYXk6ICdNZWRpY2FsIHByYWN0aXRpb25lciAob2NjdXBhdGlvbiknLAogICAgICAgICAgfSwKICAgICAgICBdLAogICAgICB9LAogICAgXSwKICB9OwoKICAvLyBDcmVhdGUgdGhlIHRhc2sgYW5kIHBlcnNpc3QgdG8gdGhlIHNlcnZlcgogIGF3YWl0IG1lZHBsdW0uY3JlYXRlUmVzb3VyY2UodGFzayk7CiAgcmV0dXJuIHRydWU7Cn0K"
      }
    },
    {
      "fullUrl": "urn:uuid:e038a143-8c66-4b27-b69c-5430aeff6053",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/javascript",
        "data": "InVzZSBzdHJpY3QiOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwpleHBvcnRzLmhhbmRsZXIgPSB2b2lkIDA7CmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoIkBtZWRwbHVtL2NvcmUiKTsKYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihtZWRwbHVtLCBldmVudCkgewogICAgY29uc3QgcmVwb3J0ID0gZXZlbnQuaW5wdXQ7CiAgICBpZiAocmVwb3J0LnN0YXR1cyAhPT0gJ3ByZWxpbWluYXJ5JykgewogICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBpbnB1dC4gRGlhZ25vc3RpY1JlcG9ydCBub3QgaW4gcHJlbGltaW5hcnkgc3RhdHVzJyk7CiAgICB9CiAgICBjb25zdCB0YXNrID0gewogICAgICAgIHJlc291cmNlVHlwZTogJ1Rhc2snLAogICAgICAgIGNvZGU6IHsKICAgICAgICAgICAgdGV4dDogJ1JldmlldyBEaWFnbm9zdGljIFJlcG9ydCcsCiAgICAgICAgfSwKICAgICAgICBzdGF0dXM6ICdyZWFkeScsCiAgICAgICAgaW50ZW50OiAnb3JkZXInLAogICAgICAgIGZvY3VzOiB7CiAgICAgICAgICAgIC8vIFRoZSBmb2N1cyBvZiB0aGUgcmVzb3VyY2Ugd2lsbCBiZSB0aGUgRGlhZ25vc3RpY1JlcG9ydAogICAgICAgICAgICByZWZlcmVuY2U6ICgwLCBjb3JlXzEuZ2V0UmVmZXJlbmNlU3RyaW5nKShyZXBvcnQpLAogICAgICAgIH0sCiAgICAgICAgZm9yOiByZXBvcnQuc3ViamVjdCwKICAgICAgICAvLyBUaGUgcGVyZm9ybWVyIHR5cGUgaXMgYSBtZWRpY2FsIHByYWN0aXRpb25lci4gVGhpcyB3aWxsIGVuc3VyZSBpdCBpcyBhc3NpZ25lZCB0byB0aGUgY29ycmVjdCBxdWV1ZSBzbyBhIGRvY3RvciBjYW4gcmV2aWV3IGl0LgogICAgICAgIHBlcmZvcm1lclR5cGU6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29kaW5nOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzeXN0ZW06ICdodHRwOi8vc25vbWVkLmluZm8vc2N0JywKICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogJzE1ODk2NTAwMCcsCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdNZWRpY2FsIHByYWN0aXRpb25lciAob2NjdXBhdGlvbiknLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICB9LAogICAgICAgIF0sCiAgICB9OwogICAgLy8gQ3JlYXRlIHRoZSB0YXNrIGFuZCBwZXJzaXN0IHRvIHRoZSBzZXJ2ZXIKICAgIGF3YWl0IG1lZHBsdW0uY3JlYXRlUmVzb3VyY2UodGFzayk7CiAgICByZXR1cm4gdHJ1ZTsKfQpleHBvcnRzLmhhbmRsZXIgPSBoYW5kbGVyOwovLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGUtcmV2aWV3LXJlcG9ydC10YXNrLmpzLm1hcA=="
      }
    },
    {
      "request": {
        "url": "$bot-create-review-report-task-reference",
        "method": "PUT"
      },
      "resource": {
        "resourceType": "Bot",
        "id": "$bot-create-review-report-task-id",
        "name": "create-review-report-task",
        "runtimeVersion": "awslambda",
        "sourceCode": {
          "contentType": "text/typescript",
          "url": "urn:uuid:146feddc-7915-4ab3-800d-c98e312116cd"
        },
        "executableCode": {
          "contentType": "text/javascript",
          "url": "urn:uuid:e038a143-8c66-4b27-b69c-5430aeff6053"
        }
      }
    },
    {
      "request": {
        "url": "Subscription",
        "method": "POST",
        "ifNoneExist": "url=$bot-create-review-report-task-reference"
      },
      "resource": {
        "resourceType": "Subscription",
        "status": "active",
        "reason": "create-review-report-task",
        "channel": {
          "endpoint": "$bot-create-review-report-task-reference",
          "type": "rest-hook"
        },
        "criteria": "DiagnosticReport"
      }
    },
    {
      "fullUrl": "urn:uuid:067a72c8-f24a-44c1-8145-cc6aa3049037",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/typescript",
        "data": ""
      }
    },
    {
      "fullUrl": "urn:uuid:a97b0a11-3e9f-42cd-af63-c33a736145b8",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/javascript",
        "data": ""
      }
    },
    {
      "request": {
        "url": "$bot-create-respond-to-message-task-reference",
        "method": "PUT"
      },
      "resource": {
        "resourceType": "Bot",
        "id": "$bot-create-respond-to-message-task-id",
        "name": "create-respond-to-message-task",
        "runtimeVersion": "awslambda",
        "sourceCode": {
          "contentType": "text/typescript",
          "url": "urn:uuid:067a72c8-f24a-44c1-8145-cc6aa3049037"
        },
        "executableCode": {
          "contentType": "text/javascript",
          "url": "urn:uuid:a97b0a11-3e9f-42cd-af63-c33a736145b8"
        }
      }
    },
    {
      "request": {
        "url": "Subscription",
        "method": "POST",
        "ifNoneExist": "url=$bot-create-respond-to-message-task-reference"
      },
      "resource": {
        "resourceType": "Subscription",
        "status": "active",
        "reason": "create-respond-to-message-task",
        "channel": {
          "endpoint": "$bot-create-respond-to-message-task-reference",
          "type": "rest-hook"
        },
        "criteria": "Communication?part-of:missing=true"
      }
    }
  ]
}