{
  "resourceType": "Bundle",
  "type": "transaction",
  "entry": [
    {
      "fullUrl": "urn:uuid:1b308ecb-22d0-425e-9891-1df976ac92de",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/typescript",
        "data": "aW1wb3J0IHsgQm90RXZlbnQsIGdldFF1ZXN0aW9ubmFpcmVBbnN3ZXJzLCBNZWRwbHVtQ2xpZW50IH0gZnJvbSAnQG1lZHBsdW0vY29yZSc7CmltcG9ydCB7CiAgQnVuZGxlLAogIENsaW5pY2FsSW1wcmVzc2lvbiwKICBDb2RlYWJsZUNvbmNlcHQsCiAgQ29uZGl0aW9uLAogIEVuY291bnRlciwKICBPYnNlcnZhdGlvbiwKICBQcmFjdGl0aW9uZXIsCiAgUXVlc3Rpb25uYWlyZVJlc3BvbnNlLAogIFJlZmVyZW5jZSwKfSBmcm9tICdAbWVkcGx1bS9maGlydHlwZXMnOwppbXBvcnQgewogIGNyZWF0ZUJ1bmRsZSwKICBjcmVhdGVDbGluaWNhbEltcHJlc3Npb25zLAogIGNyZWF0ZUNvbmRpdGlvbnMsCiAgY3JlYXRlT2JzZXJ2YXRpb25zLAogIE9ic2VydmF0aW9uRGF0YSwKfSBmcm9tICcuL2NoYXJ0aW5nLXV0aWxzJzsKaW1wb3J0IHsgY2FsY3VsYXRlQk1JIH0gZnJvbSAnLi9vYnNlcnZhdGlvbi11dGlscyc7CgpleHBvcnQgaW50ZXJmYWNlIEdlbmVyYWxPYnNlcnZhdGlvbkRhdGEgZXh0ZW5kcyBPYnNlcnZhdGlvbkRhdGEgewogIGhvdEZsYXNoPzogYm9vbGVhbjsKICBtb29kU3dpbmdzPzogYm9vbGVhbjsKICB2YWdpbmFsRHJ5bmVzcz86IGJvb2xlYW47CiAgc2xlZXBEaXN0dXJiYW5jZT86IGJvb2xlYW47CiAgc2VsZlJlcG9ydGVkSGlzdG9yeT86IHN0cmluZzsKfQoKZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQ6IEJvdEV2ZW50PFF1ZXN0aW9ubmFpcmVSZXNwb25zZT4sIG1lZHBsdW06IE1lZHBsdW1DbGllbnQpOiBQcm9taXNlPEJ1bmRsZT4gewogIC8vIFBhcnNlIHRoZSBhbnN3ZXJzIGZyb20gdGhlIFF1ZXN0aW9ubmFpcmVSZXNwb25zZQogIGNvbnN0IHJlc3BvbnNlID0gZXZlbnQuaW5wdXQ7CiAgY29uc3QgYW5zd2VycyA9IGdldFF1ZXN0aW9ubmFpcmVBbnN3ZXJzKHJlc3BvbnNlKTsKICAvLyBHZXQgdGhlIGxpbmtlZCBlbmNvdW50ZXIgYW5kIHRoZSB1c2VyIHdobyBpbml0aWF0ZWQgdGhlIGJvdAogIGNvbnN0IGVuY291bnRlciA9IGF3YWl0IG1lZHBsdW0ucmVhZFJlZmVyZW5jZShyZXNwb25zZS5lbmNvdW50ZXIgYXMgUmVmZXJlbmNlPEVuY291bnRlcj4pOwogIGNvbnN0IHVzZXIgPSBtZWRwbHVtLmdldFByb2ZpbGUoKSBhcyBQcmFjdGl0aW9uZXI7CgogIC8vIFJlYXNvbiBmb3IgdmlzaXQgaXMgYSByZXF1aXJlZCBhbnN3ZXIsIHNvIGlmIGl0IGlzIG1pc3NpbmcgdGhyb3cgYW4gZXJyb3IKICBpZiAoIWFuc3dlcnNbJ3JlYXNvbi1mb3ItdmlzaXQnXT8udmFsdWVDb2RpbmcpIHsKICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIGEgcmVhc29uIGZvciB0aGUgdmlzaXQnKTsKICB9CgogIC8vIFBhcnNlIHRoZSBhbnN3ZXJzIGludG8gbW9yZSBlYXNpbHkgdXNhYmxlIG9iamVjdHMKICBjb25zdCBvYnNlcnZhdGlvbkRhdGE6IEdlbmVyYWxPYnNlcnZhdGlvbkRhdGEgPSB7CiAgICBibG9vZFByZXNzdXJlOiB7CiAgICAgIGRpYXN0b2xpYzogYW5zd2Vyc1snZGlhc3RvbGljJ10/LnZhbHVlSW50ZWdlciwKICAgICAgc3lzdG9saWM6IGFuc3dlcnNbJ3N5c3RvbGljJ10/LnZhbHVlSW50ZWdlciwKICAgIH0sCiAgICBoZWlnaHQ6IGFuc3dlcnNbJ2hlaWdodCddPy52YWx1ZVF1YW50aXR5LAogICAgd2VpZ2h0OiBhbnN3ZXJzWyd3ZWlnaHQnXT8udmFsdWVRdWFudGl0eSwKICAgIGhvdEZsYXNoOiBhbnN3ZXJzWydob3QtZmxhc2hlcyddPy52YWx1ZUJvb2xlYW4sCiAgICBtb29kU3dpbmdzOiBhbnN3ZXJzWydtb29kLXN3aW5ncyddPy52YWx1ZUJvb2xlYW4sCiAgICB2YWdpbmFsRHJ5bmVzczogYW5zd2Vyc1sndmFnaW5hbC1kcnluZXNzJ10/LnZhbHVlQm9vbGVhbiwKICAgIHNsZWVwRGlzdHVyYmFuY2U6IGFuc3dlcnNbJ3NsZWVwLWRpc3R1cmJhbmNlJ10/LnZhbHVlQm9vbGVhbiwKICAgIHNlbGZSZXBvcnRlZEhpc3Rvcnk6IGFuc3dlcnNbJ3NlbGYtcmVwb3J0ZWQtaGlzdG9yeSddPy52YWx1ZVN0cmluZywKICAgIGRhdGU6IGFuc3dlcnNbJ2RhdGUnXT8udmFsdWVEYXRlVGltZSwKICB9OwoKICBpZiAob2JzZXJ2YXRpb25EYXRhLmhlaWdodCAmJiBvYnNlcnZhdGlvbkRhdGEud2VpZ2h0KSB7CiAgICBvYnNlcnZhdGlvbkRhdGEuYm1pID0gY2FsY3VsYXRlQk1JKG9ic2VydmF0aW9uRGF0YS5oZWlnaHQsIG9ic2VydmF0aW9uRGF0YS53ZWlnaHQpOwogIH0KCiAgY29uc3QgcHJvYmxlbUxpc3QgPSBhbnN3ZXJzWydwcm9ibGVtLWxpc3QnXT8udmFsdWVCb29sZWFuID8/IGZhbHNlOwoKICBjb25zdCBwYXJ0aWFsQ29uZGl0aW9uOiBQYXJ0aWFsPENvbmRpdGlvbj4gPSB7CiAgICByZXNvdXJjZVR5cGU6ICdDb25kaXRpb24nLAogICAgY29kZTogYW5zd2Vyc1sncmVhc29uLWZvci12aXNpdCddLnZhbHVlQ29kaW5nLAogIH07CgogIGNvbnN0IG5vdGUgPSBhbnN3ZXJzWydhc3Nlc3NtZW50J10/LnZhbHVlU3RyaW5nOwoKICBjb25zdCBvYnNlcnZhdGlvblR5cGVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0gewogICAgaGVpZ2h0OiAndmFsdWVRdWFudGl0eScsCiAgICB3ZWlnaHQ6ICd2YWx1ZVF1YW50aXR5JywKICAgIGJtaTogJ3ZhbHVlUXVhbnRpdHknLAogICAgaG90Rmxhc2g6ICd2YWx1ZUJvb2xlYW4nLAogICAgbW9vZFN3aW5nczogJ3ZhbHVlQm9vbGVhbicsCiAgICB2YWdpbmFsRHJ5bmVzczogJ3ZhbHVlQm9vbGVhbicsCiAgICBzbGVlcERpc3R1cmJhbmNlOiAndmFsdWVCb29sZWFuJywKICAgIHNlbGZSZXBvcnRlZEhpc3Rvcnk6ICd2YWx1ZVN0cmluZycsCiAgfTsKCiAgLy8gVGFrZSB0aGUgb2JqZWN0cyBhbmQgY3JlYXRlIGZ1bGwgcmVzb3VyY2VzIG9mIGVhY2ggdHlwZQogIC8vIGNvbnN0IHBhcnRpYWxPYnNlcnZhdGlvbnMgPSBjcmVhdGVQYXJ0aWFsR2VuZXJhbE9ic2VydmF0aW9ucyhvYnNlcnZhdGlvbkRhdGEsIGdlbmVyYWxDb2Rlcyk7CiAgY29uc3Qgb2JzZXJ2YXRpb25zID0gY3JlYXRlT2JzZXJ2YXRpb25zKG9ic2VydmF0aW9uRGF0YSwgZ2VuZXJhbENvZGVzLCBvYnNlcnZhdGlvblR5cGVzLCBlbmNvdW50ZXIsIHVzZXIsIHJlc3BvbnNlKTsKICBjb25zdCBjb25kaXRpb25zID0gY3JlYXRlQ29uZGl0aW9ucyhwYXJ0aWFsQ29uZGl0aW9uLCBlbmNvdW50ZXIsIHVzZXIsIHByb2JsZW1MaXN0KTsKICBjb25zdCBjbGluaWNhbEltcHJlc3Npb25zID0gY3JlYXRlQ2xpbmljYWxJbXByZXNzaW9ucyhlbmNvdW50ZXIsIHVzZXIsIG5vdGUpOwoKICAvLyBDcmVhdGUgYW4gYXJyYXkgb2YgYWxsIHJlc291cmNlcwogIGNvbnN0IHJlc291cmNlczogKENvbmRpdGlvbiB8IE9ic2VydmF0aW9uIHwgQ2xpbmljYWxJbXByZXNzaW9uKVtdID0gWy4uLm9ic2VydmF0aW9ucywgLi4uY29uZGl0aW9uc107CiAgaWYgKGNsaW5pY2FsSW1wcmVzc2lvbnMpIHsKICAgIHJlc291cmNlcy5wdXNoKGNsaW5pY2FsSW1wcmVzc2lvbnMpOwogIH0KCiAgY29uc3QgYnVuZGxlID0gY3JlYXRlQnVuZGxlKHJlc291cmNlcyk7CgogIC8vIEV4ZWN1dGUgdGhlIGJhdGNoIHRvIGNyZWF0ZSBhbGwgcmVzb3VyY2VzIGF0IG9uY2UKICBjb25zdCByZXNwb25zZUJ1bmRsZSA9IGF3YWl0IG1lZHBsdW0uZXhlY3V0ZUJhdGNoKGJ1bmRsZSk7CiAgcmV0dXJuIHJlc3BvbnNlQnVuZGxlOwp9CgpleHBvcnQgY29uc3QgZ2VuZXJhbENvZGVzOiBSZWNvcmQ8c3RyaW5nLCBDb2RlYWJsZUNvbmNlcHQ+ID0gewogIGhlaWdodDogewogICAgY29kaW5nOiBbeyBjb2RlOiAnODMwMi0yJywgc3lzdGVtOiAnaHR0cDovL2xvaW5jLm9yZycsIGRpc3BsYXk6ICdCb2R5IGhlaWdodCcgfV0sCiAgfSwKICB3ZWlnaHQ6IHsKICAgIGNvZGluZzogW3sgY29kZTogJzI5NDYzLTcnLCBzeXN0ZW06ICdodHRwOi8vbG9pbmMub3JnJywgZGlzcGxheTogJ0JvZHkgd2VpZ2h0JyB9XSwKICB9LAogIGJsb29kUHJlc3N1cmU6IHsKICAgIGNvZGluZzogW3sgY29kZTogJzM1MDk0LTInLCBzeXN0ZW06ICdodHRwOi8vbG9pbmMub3JnJywgZGlzcGxheTogJ0Jsb29kIHByZXNzdXJlIHBhbmVsJyB9XSwKICB9LAogIGJtaTogewogICAgY29kaW5nOiBbeyBjb2RlOiAnMzkxNTYtNScsIHN5c3RlbTogJ2h0dHA6Ly9sb2luYy5vcmcnLCBkaXNwbGF5OiAnQm9keSBNYXNzIEluZGV4IChCTUkpJyB9XSwKICB9LAogIGhvdEZsYXNoOiB7CiAgICBjb2Rpbmc6IFt7IGNvZGU6ICc3MDM3Ni05Jywgc3lzdGVtOiAnaHR0cDovL2xvaW5jLm9yZycsIGRpc3BsYXk6ICdJIGhhdmUgaG90IGZsYXNoZXMgaW4gdGhlIGxhc3QgNyBkYXlzJyB9XSwKICB9LAogIG1vb2RTd2luZ3M6IHsKICAgIGNvZGluZzogW3sgY29kZTogJzcwODA1LTcnLCBzeXN0ZW06ICdodHRwOi8vbG9pbmcub3JnJywgZGlzcGxheTogJ0kgaGF2ZSBtb29kIHN3aW5ncyBpbiB0aGUgbGFzdCA3IGRheXMnIH1dLAogIH0sCiAgdmFnaW5hbERyeW5lc3M6IHsKICAgIGNvZGluZzogW3sgY29kZTogJzcwODAyLTQnLCBzeXN0ZW06ICdodHRwOi8vbG9pbmcub3JnJywgZGlzcGxheTogJ0kgaGF2ZSB2YWdpbmFsIGRyeW5lc3MgaW4gdGhlIGxhc3QgNyBkYXlzJyB9XSwKICB9LAogIHNsZWVwRGlzdHVyYmFuY2U6IHsKICAgIGNvZGluZzogW3sgY29kZTogJzc3NzEyLTgnLCBzeXN0ZW06ICdodHRwOi8vbG9pbmcub3JnJywgZGlzcGxheTogJ1NsZWVwIGRpc3R1cmJhbmNlIGluZGljYXRvciBpbiB0aGUgbGFzdCB3ZWVrJyB9XSwKICB9LAp9Owo="
      }
    },
    {
      "fullUrl": "urn:uuid:a6364d5c-6792-40f3-b4a0-7287516dd3db",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/javascript",
        "data": ""
      }
    },
    {
      "request": {
        "method": "PUT",
        "url": "$bot-general-encounter-note-reference"
      },
      "resource": {
        "resourceType": "Bot",
        "id": "$bot-general-encounter-note-id",
        "name": "general-encounter-note",
        "runtimeVersion": "awslambda",
        "sourceCode": {
          "contentType": "text/typescript",
          "url": "urn:uuid:1b308ecb-22d0-425e-9891-1df976ac92de"
        },
        "executableCode": {
          "contentType": "text/javascript",
          "url": "urn:uuid:a6364d5c-6792-40f3-b4a0-7287516dd3db"
        }
      }
    },
    {
      "request": {
        "url": "Subscription",
        "method": "POST",
        "ifNoneExist": "url=$bot-general-encounter-note-reference"
      },
      "resource": {
        "resourceType": "Subscription",
        "status": "active",
        "reason": "general-encounter-note",
        "channel": {
          "endpoint": "$bot-general-encounter-note-reference",
          "type": "rest-hook"
        },
        "criteria": "QuestionnaireResponse?questionnaire=$encounter-note"
      }
    },
    {
      "fullUrl": "urn:uuid:72416bca-c551-4034-9db4-c85d9378be60",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/typescript",
        "data": "aW1wb3J0IHsgQm90RXZlbnQsIGdldFF1ZXN0aW9ubmFpcmVBbnN3ZXJzLCBNZWRwbHVtQ2xpZW50IH0gZnJvbSAnQG1lZHBsdW0vY29yZSc7CmltcG9ydCB7CiAgQnVuZGxlLAogIENsaW5pY2FsSW1wcmVzc2lvbiwKICBDb2RlYWJsZUNvbmNlcHQsCiAgQ29uZGl0aW9uLAogIEVuY291bnRlciwKICBPYnNlcnZhdGlvbiwKICBQcmFjdGl0aW9uZXIsCiAgUXVhbnRpdHksCiAgUXVlc3Rpb25uYWlyZVJlc3BvbnNlLAogIFJlZmVyZW5jZSwKfSBmcm9tICdAbWVkcGx1bS9maGlydHlwZXMnOwppbXBvcnQgewogIGNyZWF0ZUJ1bmRsZSwKICBjcmVhdGVDbGluaWNhbEltcHJlc3Npb25zLAogIGNyZWF0ZUNvbmRpdGlvbnMsCiAgY3JlYXRlT2JzZXJ2YXRpb25zLAogIE9ic2VydmF0aW9uRGF0YSwKfSBmcm9tICcuL2NoYXJ0aW5nLXV0aWxzJzsKaW1wb3J0IHsgY2FsY3VsYXRlQk1JIH0gZnJvbSAnLi9vYnNlcnZhdGlvbi11dGlscyc7CgpleHBvcnQgaW50ZXJmYWNlIE9ic3RldHJpY09ic2VydmF0aW9uRGF0YSBleHRlbmRzIE9ic2VydmF0aW9uRGF0YSB7CiAgZ3JhdmlkYT86IG51bWJlcjsKICBwYXJhPzogbnVtYmVyOwogIGdlc3RhdGlvbmFsRGF5cz86IG51bWJlcjsKICBnZXN0YXRpb25hbFdlZWtzPzogbnVtYmVyOwogIHRvdGFsV2VpZ2h0R2Fpbj86IFF1YW50aXR5Owp9CgpleHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihldmVudDogQm90RXZlbnQ8UXVlc3Rpb25uYWlyZVJlc3BvbnNlPiwgbWVkcGx1bTogTWVkcGx1bUNsaWVudCk6IFByb21pc2U8QnVuZGxlPiB7CiAgLy8gUGFyc2UgdGhlIGFuc3dlcnMgZnJvbSB0aGUgUXVlc3Rpb25uYWlyZVJlc3BvbnNlCiAgY29uc3QgcmVzcG9uc2UgPSBldmVudC5pbnB1dDsKICBjb25zdCBhbnN3ZXJzID0gZ2V0UXVlc3Rpb25uYWlyZUFuc3dlcnMocmVzcG9uc2UpOwogIC8vIEdldCB0aGUgbGlua2VkIGVuY291bnRlciBhbmQgdGhlIHVzZXIgd2hvIGluaXRpYXRlZCB0aGUgYm90CiAgY29uc3QgZW5jb3VudGVyID0gYXdhaXQgbWVkcGx1bS5yZWFkUmVmZXJlbmNlKHJlc3BvbnNlLmVuY291bnRlciBhcyBSZWZlcmVuY2U8RW5jb3VudGVyPik7CiAgY29uc3QgdXNlciA9IG1lZHBsdW0uZ2V0UHJvZmlsZSgpIGFzIFByYWN0aXRpb25lcjsKCiAgLy8gVGhlIHJlYXNvbiBmb3IgdmlzaXQgcXVlc3Rpb24gaXMgcmVxdWlyZWQuIElmIGl0IGlzIG5vdCBpbmNsdWRlZCwgd2UgdGhyb3cgYW4gZXJyb3IKICBpZiAoIWFuc3dlcnNbJ3JlYXNvbi1mb3ItdmlzaXQnXSkgewogICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHByb3ZpZGUgYSByZWFzb24gZm9yIHRoZSB2aXNpdCcpOwogIH0KCiAgLy8gUGFyc2UgdGhlIGFuc3dlcnMgaW50byBtb3JlIGVhc2lseSB1c2FibGUgb2JqZWN0cwogIGNvbnN0IG9ic2VydmF0aW9uRGF0YTogT2JzdGV0cmljT2JzZXJ2YXRpb25EYXRhID0gewogICAgZ3JhdmlkYTogYW5zd2Vyc1snZ3JhdmlkYSddPy52YWx1ZUludGVnZXIsCiAgICBwYXJhOiBhbnN3ZXJzWydwYXJhJ10/LnZhbHVlSW50ZWdlciwKICAgIGdlc3RhdGlvbmFsRGF5czogYW5zd2Vyc1snZ2VzdGF0aW9uYWwtYWdlLWRheXMnXT8udmFsdWVJbnRlZ2VyLAogICAgZ2VzdGF0aW9uYWxXZWVrczogYW5zd2Vyc1snZ2VzdGF0aW9uYWwtYWdlLXdlZWtzJ10/LnZhbHVlSW50ZWdlciwKICAgIGhlaWdodDogYW5zd2Vyc1snaGVpZ2h0J10/LnZhbHVlUXVhbnRpdHksCiAgICB3ZWlnaHQ6IGFuc3dlcnNbJ3dlaWdodCddPy52YWx1ZVF1YW50aXR5LAogICAgdG90YWxXZWlnaHRHYWluOiBhbnN3ZXJzWyd0b3RhbC13ZWlnaHQtZ2FpbiddPy52YWx1ZVF1YW50aXR5LAogICAgYmxvb2RQcmVzc3VyZTogewogICAgICBzeXN0b2xpYzogYW5zd2Vyc1snc3lzdG9saWMnXT8udmFsdWVJbnRlZ2VyLAogICAgICBkaWFzdG9saWM6IGFuc3dlcnNbJ2RpYXN0b2xpYyddPy52YWx1ZUludGVnZXIsCiAgICB9LAogICAgZGF0ZTogYW5zd2Vyc1snZGF0ZSddPy52YWx1ZURhdGVUaW1lLAogIH07CgogIGlmIChvYnNlcnZhdGlvbkRhdGEuaGVpZ2h0ICYmIG9ic2VydmF0aW9uRGF0YS53ZWlnaHQpIHsKICAgIG9ic2VydmF0aW9uRGF0YS5ibWkgPSBjYWxjdWxhdGVCTUkob2JzZXJ2YXRpb25EYXRhLmhlaWdodCwgb2JzZXJ2YXRpb25EYXRhLndlaWdodCk7CiAgfQoKICBjb25zdCBwcm9ibGVtTGlzdCA9IGFuc3dlcnNbJ3Byb2JsZW0tbGlzdCddPy52YWx1ZUJvb2xlYW4gPz8gZmFsc2U7CgogIGNvbnN0IHBhcnRpYWxDb25kaXRpb246IFBhcnRpYWw8Q29uZGl0aW9uPiA9IHsKICAgIHJlc291cmNlVHlwZTogJ0NvbmRpdGlvbicsCiAgICBjb2RlOiBhbnN3ZXJzWydyZWFzb24tZm9yLXZpc2l0J10udmFsdWVDb2RpbmcsCiAgfTsKCiAgY29uc3Qgbm90ZSA9IGFuc3dlcnNbJ2Fzc2Vzc21lbnQnXT8udmFsdWVTdHJpbmc7CgogIGNvbnN0IG9ic2VydmF0aW9uVHlwZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7CiAgICBoZWlnaHQ6ICd2YWx1ZVF1YW50aXR5JywKICAgIHdlaWdodDogJ3ZhbHVlUXVhbnRpdHknLAogICAgYm1pOiAndmFsdWVRdWFudGl0eScsCiAgICBncmF2aWRhOiAndmFsdWVJbnRlZ2VyJywKICAgIHBhcmE6ICd2YWx1ZUludGVnZXInLAogICAgZ2VzdGF0aW9uYWxEYXlzOiAndmFsdWVJbnRlZ2VyJywKICAgIGdlc3RhdGlvbmFsV2Vla3M6ICd2YWx1ZUludGVnZXInLAogICAgdG90YWxXZWlnaHRHYWluOiAndmFsdWVRdWFudGl0eScsCiAgfTsKCiAgLy8gVGFrZSB0aGUgYWJvdmUgb2JqZWN0cyBhbmQgY3JlYXRlIHJlc291cmNlcyBmb3IgZWFjaCB0eXBlCiAgY29uc3Qgb2JzZXJ2YXRpb25zID0gY3JlYXRlT2JzZXJ2YXRpb25zKG9ic2VydmF0aW9uRGF0YSwgb2JzdGV0cmljQ29kZXMsIG9ic2VydmF0aW9uVHlwZXMsIGVuY291bnRlciwgdXNlciwgcmVzcG9uc2UpOwogIGNvbnN0IGNvbmRpdGlvbnMgPSBjcmVhdGVDb25kaXRpb25zKHBhcnRpYWxDb25kaXRpb24sIGVuY291bnRlciwgdXNlciwgcHJvYmxlbUxpc3QpOwogIGNvbnN0IGNsaW5pY2FsSW1wcmVzc2lvbnMgPSBjcmVhdGVDbGluaWNhbEltcHJlc3Npb25zKGVuY291bnRlciwgdXNlciwgbm90ZSk7CgogIC8vIENyZWF0ZSBhbiBlbnRyeSBhcnJheSBvZiBhbGwgdGhlIGJ1bmRsZSBlbnRyaWVzCiAgY29uc3QgcmVzb3VyY2VzOiAoT2JzZXJ2YXRpb24gfCBDb25kaXRpb24gfCBDbGluaWNhbEltcHJlc3Npb24pW10gPSBbLi4ub2JzZXJ2YXRpb25zLCAuLi5jb25kaXRpb25zXTsKICBpZiAoY2xpbmljYWxJbXByZXNzaW9ucykgewogICAgcmVzb3VyY2VzLnB1c2goY2xpbmljYWxJbXByZXNzaW9ucyk7CiAgfQoKICAvLyBCdWlsZCB0aGUgYnVuZGxlCiAgY29uc3QgYnVuZGxlID0gY3JlYXRlQnVuZGxlKHJlc291cmNlcyk7CgogIC8vIEV4ZWN1dGUgdGhlIGJ1bmRsZSBhcyBhIGJhdGNoIHRvIGNyZWF0ZSBhbGwgb2YgdGhlIE9ic2VydmF0aW9uLCBDb25kaXRpb24sIGFuZCBDbGluaWNhbEltcHJlc3Npb24gcmVzb3VyY2VzIGF0IG9uY2UKICBjb25zdCByZXNwb25zZUJ1bmRsZSA9IGF3YWl0IG1lZHBsdW0uZXhlY3V0ZUJhdGNoKGJ1bmRsZSk7CiAgcmV0dXJuIHJlc3BvbnNlQnVuZGxlOwp9Cgpjb25zdCBvYnN0ZXRyaWNDb2RlczogUmVjb3JkPHN0cmluZywgQ29kZWFibGVDb25jZXB0PiA9IHsKICBoZWlnaHQ6IHsKICAgIGNvZGluZzogW3sgY29kZTogJzgzMDItMicsIHN5c3RlbTogJ2h0dHA6Ly9sb2luYy5vcmcnLCBkaXNwbGF5OiAnQm9keSBoZWlnaHQnIH1dLAogIH0sCiAgd2VpZ2h0OiB7CiAgICBjb2Rpbmc6IFt7IGNvZGU6ICcyOTQ2My03Jywgc3lzdGVtOiAnaHR0cDovL2xvaW5jLm9yZycsIGRpc3BsYXk6ICdCb2R5IHdlaWdodCcgfV0sCiAgfSwKICBibG9vZFByZXNzdXJlOiB7CiAgICBjb2Rpbmc6IFt7IGNvZGU6ICczNTA5NC0yJywgc3lzdGVtOiAnaHR0cDovL2xvaW5jLm9yZycsIGRpc3BsYXk6ICdCbG9vZCBwcmVzc3VyZSBwYW5lbCcgfV0sCiAgfSwKICBibWk6IHsKICAgIGNvZGluZzogW3sgY29kZTogJzM5MTU2LTUnLCBzeXN0ZW06ICdodHRwOi8vbG9pbmMub3JnJywgZGlzcGxheTogJ0JvZHkgTWFzcyBJbmRleCAoQk1JKScgfV0sCiAgfSwKICBncmF2aWRhOiB7CiAgICBjb2Rpbmc6IFt7IGNvZGU6ICcxNjE3MzIwMDYnLCBzeXN0ZW06ICdodHRwOi8vc25vbWVkLmluZm8vc2N0JywgZGlzcGxheTogJ0dyYXZpZGEnIH1dLAogIH0sCiAgcGFyYTogewogICAgY29kaW5nOiBbeyBjb2RlOiAnMTE4MjEyMDAwJywgc3lzdGVtOiAnaHR0cDovL3Nub21lZC5pbmZvL3NjdCcsIGRpc3BsYXk6ICdQYXJpdHkgZmluZGluZycgfV0sCiAgfSwKICBnZXN0YXRpb25hbERheXM6IHsKICAgIGNvZGluZzogW3sgY29kZTogJzQ5MDUyLTQnLCBzeXN0ZW06ICdodHRwOi8vbG9pbmMub3JnJywgZGlzcGxheTogJ0dlc3RhdGlvbmFsIGFnZSBpbiBkYXlzJyB9XSwKICB9LAogIGdlc3RhdGlvbmFsV2Vla3M6IHsKICAgIGNvZGluZzogW3sgY29kZTogJzQ5MDUxLTYnLCBzeXN0ZW06ICdodHRwOi8vbG9pbmMub3JnJywgZGlzcGxheTogJ0dlc3RhdGlvbmFsIGFnZSBpbiB3ZWVrcycgfV0sCiAgfSwKICB0b3RhbFdlaWdodEdhaW46IHsKICAgIGNvZGluZzogW3sgY29kZTogJzU2MDc4LTknLCBzeXN0ZW06ICdodHRwOi8vbG9pbmMub3JnJywgZGlzcGxheTogJ1dlaWdodCBnYWluIFtNYXNzXSAtLWR1cmluZyBjdXJyZW50IHByZWduYW5jeScgfV0sCiAgfSwKfTsK"
      }
    },
    {
      "fullUrl": "urn:uuid:226d3775-bade-4565-a0bf-b986c2637011",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/javascript",
        "data": ""
      }
    },
    {
      "request": {
        "method": "PUT",
        "url": "$bot-obstetric-encounter-note-reference"
      },
      "resource": {
        "resourceType": "Bot",
        "id": "$bot-obstetric-encounter-note-id",
        "name": "obstetric-encounter-note",
        "runtimeVersion": "awslambda",
        "sourceCode": {
          "contentType": "text/typescript",
          "url": "urn:uuid:72416bca-c551-4034-9db4-c85d9378be60"
        },
        "executableCode": {
          "contentType": "text/javascript",
          "url": "urn:uuid:226d3775-bade-4565-a0bf-b986c2637011"
        }
      }
    },
    {
      "request": {
        "url": "Subscription",
        "method": "POST",
        "ifNoneExist": "url=$bot-obstetric-encounter-note-reference"
      },
      "resource": {
        "resourceType": "Subscription",
        "status": "active",
        "reason": "obstetric-encounter-note",
        "channel": {
          "endpoint": "$bot-obstetric-encounter-note-reference",
          "type": "rest-hook"
        },
        "criteria": "QuestionnaireResponse?questionnaire=$obstetric-visit"
      }
    },
    {
      "fullUrl": "urn:uuid:c6e597f1-5c64-4b0c-9ea8-113a08450bac",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/typescript",
        "data": "aW1wb3J0IHsgQm90RXZlbnQsIGdldFF1ZXN0aW9ubmFpcmVBbnN3ZXJzLCBNZWRwbHVtQ2xpZW50IH0gZnJvbSAnQG1lZHBsdW0vY29yZSc7CmltcG9ydCB7CiAgQnVuZGxlLAogIENsaW5pY2FsSW1wcmVzc2lvbiwKICBDb2RlYWJsZUNvbmNlcHQsCiAgQ29kaW5nLAogIENvbmRpdGlvbiwKICBFbmNvdW50ZXIsCiAgT2JzZXJ2YXRpb24sCiAgUHJhY3RpdGlvbmVyLAogIFF1ZXN0aW9ubmFpcmVSZXNwb25zZSwKICBSZWZlcmVuY2UsCn0gZnJvbSAnQG1lZHBsdW0vZmhpcnR5cGVzJzsKaW1wb3J0IHsKICBjcmVhdGVCdW5kbGUsCiAgY3JlYXRlQ2xpbmljYWxJbXByZXNzaW9ucywKICBjcmVhdGVDb25kaXRpb25zLAogIGNyZWF0ZU9ic2VydmF0aW9ucywKICBPYnNlcnZhdGlvbkRhdGEsCn0gZnJvbSAnLi9jaGFydGluZy11dGlscyc7CmltcG9ydCB7IGNhbGN1bGF0ZUJNSSB9IGZyb20gJy4vb2JzZXJ2YXRpb24tdXRpbHMnOwoKZXhwb3J0IGludGVyZmFjZSBHeW5lY29sb2d5T2JzZXJ2YXRpb25EYXRhIGV4dGVuZHMgT2JzZXJ2YXRpb25EYXRhIHsKICBsYXN0UGVyaW9kPzogc3RyaW5nOwogIGNvbnRyYWNlcHRpb24/OiBDb2Rpbmc7CiAgbGFzdE1hbW1vZ3JhbT86IHN0cmluZzsKICBzbW9raW5nU3RhdHVzPzogQ29kaW5nOwogIGRydWdVc2U/OiBDb2Rpbmc7CiAgaG91c2luZ1N0YXR1cz86IENvZGluZzsKfQoKZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQ6IEJvdEV2ZW50PFF1ZXN0aW9ubmFpcmVSZXNwb25zZT4sIG1lZHBsdW06IE1lZHBsdW1DbGllbnQpOiBQcm9taXNlPEJ1bmRsZT4gewogIC8vIFBhcnNlIHRoZSBhbnN3ZXJzIGZyb20gdGhlIFF1ZXN0aW9ubmFpcmVSZXNwb25zZQogIGNvbnN0IHJlc3BvbnNlID0gZXZlbnQuaW5wdXQ7CiAgY29uc3QgYW5zd2VycyA9IGdldFF1ZXN0aW9ubmFpcmVBbnN3ZXJzKHJlc3BvbnNlKTsKICAvLyBHZXQgdGhlIGxpbmtlZCBlbmNvdW50ZXIgYW5kIHVzZXIgd2hvIGluaXRpYXRlZCB0aGUgYm90CiAgY29uc3QgZW5jb3VudGVyID0gYXdhaXQgbWVkcGx1bS5yZWFkUmVmZXJlbmNlKHJlc3BvbnNlLmVuY291bnRlciBhcyBSZWZlcmVuY2U8RW5jb3VudGVyPik7CiAgY29uc3QgdXNlciA9IG1lZHBsdW0uZ2V0UHJvZmlsZSgpIGFzIFByYWN0aXRpb25lcjsKCiAgLy8gUmVhc29uIGZvciB2aXNpdCBpcyByZXF1aXJlZCB0byBoYXZlIGFuIGFuc3dlciwgc28gYW4gZXJyb3IgaXMgdGhyb3duIGlmIHRoZXJlIGlzbid0IG9uZQogIGlmICghYW5zd2Vyc1sncmVhc29uLWZvci12aXNpdCddPy52YWx1ZUNvZGluZykgewogICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHByb3ZpZGUgYSByZWFzb24gZm9yIHRoZSB2aXNpdCcpOwogIH0KCiAgLy8gUGFyc2UgdGhlIGFuc3dlcnMgaW50byBtb3JlIGVhc2lseSB1c2FibGUgb2JqZWN0cwogIGNvbnN0IG9ic2VydmF0aW9uRGF0YTogR3luZWNvbG9neU9ic2VydmF0aW9uRGF0YSA9IHsKICAgIGxhc3RQZXJpb2Q6IGFuc3dlcnNbJ2xhc3QtcGVyaW9kJ10/LnZhbHVlRGF0ZSwKICAgIGNvbnRyYWNlcHRpb246IGFuc3dlcnNbJ2NvbnRyYWNlcHRpb24nXT8udmFsdWVDb2RpbmcsCiAgICBsYXN0TWFtbW9ncmFtOiBhbnN3ZXJzWydtYW1tb2dyYW0nXT8udmFsdWVEYXRlLAogICAgc21va2luZ1N0YXR1czogYW5zd2Vyc1snc21va2luZyddPy52YWx1ZUNvZGluZywKICAgIGRydWdVc2U6IGFuc3dlcnNbJ2RydWdzJ10/LnZhbHVlQ29kaW5nLAogICAgaG91c2luZ1N0YXR1czogYW5zd2Vyc1snaG91c2luZyddPy52YWx1ZUNvZGluZywKICAgIGJsb29kUHJlc3N1cmU6IHsKICAgICAgc3lzdG9saWM6IGFuc3dlcnNbJ3N5c3RvbGljJ10/LnZhbHVlSW50ZWdlciwKICAgICAgZGlhc3RvbGljOiBhbnN3ZXJzWydkaWFzdG9saWMnXT8udmFsdWVJbnRlZ2VyLAogICAgfSwKICAgIGhlaWdodDogYW5zd2Vyc1snaGVpZ2h0J10/LnZhbHVlUXVhbnRpdHksCiAgICB3ZWlnaHQ6IGFuc3dlcnNbJ3dlaWdodCddPy52YWx1ZVF1YW50aXR5LAogICAgZGF0ZTogYW5zd2Vyc1snZGF0ZSddPy52YWx1ZURhdGVUaW1lLAogIH07CgogIGlmIChvYnNlcnZhdGlvbkRhdGEuaGVpZ2h0ICYmIG9ic2VydmF0aW9uRGF0YS53ZWlnaHQpIHsKICAgIG9ic2VydmF0aW9uRGF0YS5ibWkgPSBjYWxjdWxhdGVCTUkob2JzZXJ2YXRpb25EYXRhLmhlaWdodCwgb2JzZXJ2YXRpb25EYXRhLndlaWdodCk7CiAgfQoKICBjb25zdCBwcm9ibGVtTGlzdCA9IGFuc3dlcnNbJ3Byb2JsZW0tbGlzdCddPy52YWx1ZUJvb2xlYW4gPz8gZmFsc2U7CgogIGNvbnN0IHBhcnRpYWxDb25kaXRpb246IFBhcnRpYWw8Q29uZGl0aW9uPiA9IHsKICAgIHJlc291cmNlVHlwZTogJ0NvbmRpdGlvbicsCiAgICBjb2RlOiBhbnN3ZXJzWydyZWFzb24tZm9yLXZpc2l0J10udmFsdWVDb2RpbmcsCiAgfTsKCiAgY29uc3Qgbm90ZSA9IGFuc3dlcnNbJ2Fzc2Vzc21lbnQnXT8udmFsdWVTdHJpbmc7CgogIGNvbnN0IG9ic2VydmF0aW9uVHlwZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7CiAgICBoZWlnaHQ6ICd2YWx1ZVF1YW50aXR5JywKICAgIHdlaWdodDogJ3ZhbHVlUXVhbnRpdHknLAogICAgYm1pOiAndmFsdWVRdWFudGl0eScsCiAgICBsYXN0UGVyaW9kOiAndmFsdWVEYXRlVGltZScsCiAgICBjb250cmFjZXB0aW9uOiAndmFsdWVDb2RlYWJsZUNvbmNlcHQnLAogICAgbGFzdE1hbW1vZ3JhbTogJ3ZhbHVlRGF0ZVRpbWUnLAogICAgc21va2luZ1N0YXR1czogJ3ZhbHVlQ29kZWFibGVDb25jZXB0JywKICAgIGRydWdVc2U6ICd2YWx1ZUNvZGVhYmxlQ29uY2VwdCcsCiAgICBob3VzaW5nU3RhdHVzOiAndmFsdWVDb2RlYWJsZUNvbmNlcHQnLAogIH07CgogIC8vIENyZWF0ZSBidW5kbGUgZW50cmllcyBmcm9tIHRoZSBhYm92ZSBvYmplY3RzCiAgLy8gY29uc3QgcGFydGlhbE9ic2VydmF0aW9ucyA9IGNyZWF0ZVBhcnRpYWxHeW5lY29sb2d5T2JzZXJ2YXRpb25zKG9ic2VydmF0aW9uRGF0YSwgZ3luZWNvbG9neUNvZGVzKTsKICBjb25zdCBvYnNlcnZhdGlvbnMgPSBjcmVhdGVPYnNlcnZhdGlvbnMoCiAgICBvYnNlcnZhdGlvbkRhdGEsCiAgICBneW5lY29sb2d5Q29kZXMsCiAgICBvYnNlcnZhdGlvblR5cGVzLAogICAgZW5jb3VudGVyLAogICAgdXNlciwKICAgIHJlc3BvbnNlCiAgKTsKICBjb25zdCBjb25kaXRpb25zID0gY3JlYXRlQ29uZGl0aW9ucyhwYXJ0aWFsQ29uZGl0aW9uLCBlbmNvdW50ZXIsIHVzZXIsIHByb2JsZW1MaXN0KTsKICBjb25zdCBjbGluaWNhbEltcHJlc3Npb25zID0gY3JlYXRlQ2xpbmljYWxJbXByZXNzaW9ucyhlbmNvdW50ZXIsIHVzZXIsIG5vdGUpOwoKICAvLyBDcmVhdGUgYW4gYXJyYXkgb2YgYnVuZGxlIGVudHJpZXMgZm9yIGFsbCByZXNvdXJjZSB0eXBlcwogIGNvbnN0IHJlc291cmNlczogKE9ic2VydmF0aW9uIHwgQ29uZGl0aW9uIHwgQ2xpbmljYWxJbXByZXNzaW9uKVtdID0gWy4uLm9ic2VydmF0aW9ucywgLi4uY29uZGl0aW9uc107CiAgaWYgKGNsaW5pY2FsSW1wcmVzc2lvbnMpIHsKICAgIHJlc291cmNlcy5wdXNoKGNsaW5pY2FsSW1wcmVzc2lvbnMpOwogIH0KCiAgY29uc3QgYnVuZGxlID0gY3JlYXRlQnVuZGxlKHJlc291cmNlcyk7CgogIC8vIEV4ZWN1dGUgdGhlIGJhdGNoIHRvIGNyZWF0ZSBhbGwgcmVzb3VyY2VzIGF0IG9uY2UKICBjb25zdCByZXNwb25zZUJ1bmRsZSA9IGF3YWl0IG1lZHBsdW0uZXhlY3V0ZUJhdGNoKGJ1bmRsZSk7CiAgcmV0dXJuIHJlc3BvbnNlQnVuZGxlOwp9Cgpjb25zdCBneW5lY29sb2d5Q29kZXM6IFJlY29yZDxzdHJpbmcsIENvZGVhYmxlQ29uY2VwdD4gPSB7CiAgbGFzdFBlcmlvZDogewogICAgY29kaW5nOiBbeyBjb2RlOiAnODY2NS0yJywgc3lzdGVtOiAnaHR0cDovL2xvaW5jLm9yZycsIGRpc3BsYXk6ICdMYXN0IG1lbnN0cnVhbCBwZXJpb2Qgc3RhcnQgZGF0ZScgfV0sCiAgfSwKICBjb250cmFjZXB0aW9uOiB7CiAgICBjb2Rpbmc6IFt7IGNvZGU6ICc4NjU5LTUnLCBzeXN0ZW06ICdodHRwOi8vbG9pbmMub3JnJywgZGlzcGxheTogJ0JpcnRoIGNvbnRyb2wgbWV0aG9kIC0gUmVwb3J0ZWQnIH1dLAogIH0sCiAgbGFzdE1hbW1vZ3JhbTogewogICAgY29kaW5nOiBbeyBjb2RlOiAnNDI5NzM2MDA4Jywgc3lzdGVtOiAnaHR0cDovL3Nub21lZC5pbmZvL3NjdCcsIGRpc3BsYXk6ICdEYXRlIG9mIGxhc3QgbWFtbW9ncmFtJyB9XSwKICB9LAogIHNtb2tpbmdTdGF0dXM6IHsKICAgIGNvZGluZzogW3sgY29kZTogJzcyMTY2LTInLCBzeXN0ZW06ICdodHRwOi8vbG9pbmMub3JnJywgZGlzcGxheTogJ1RvYmFjY28gc21va2luZyBzdGF0dXMnIH1dLAogIH0sCiAgZHJ1Z1VzZTogewogICAgY29kaW5nOiBbeyBjb2RlOiAnNzQyMDQtOScsIHN5c3RlbTogJ2h0dHA6Ly9sb2luYy5vcmcnLCBkaXNwbGF5OiAnRHJ1ZyB1c2UnIH1dLAogIH0sCiAgaG91c2luZ1N0YXR1czogewogICAgY29kaW5nOiBbeyBjb2RlOiAnNzE4MDItMycsIHN5c3RlbTogJ2h0dHA6Ly9sb2luYy5vcmcnLCBkaXNwbGF5OiAnSG91c2luZyBzdGF0dXMnIH1dLAogIH0sCiAgaGVpZ2h0OiB7CiAgICBjb2Rpbmc6IFt7IGNvZGU6ICc4MzAyLTInLCBzeXN0ZW06ICdodHRwOi8vbG9pbmMub3JnJywgZGlzcGxheTogJ0JvZHkgaGVpZ2h0JyB9XSwKICB9LAogIHdlaWdodDogewogICAgY29kaW5nOiBbeyBjb2RlOiAnMjk0NjMtNycsIHN5c3RlbTogJ2h0dHA6Ly9sb2luYy5vcmcnLCBkaXNwbGF5OiAnQm9keSB3ZWlnaHQnIH1dLAogIH0sCiAgYmxvb2RQcmVzc3VyZTogewogICAgY29kaW5nOiBbeyBjb2RlOiAnMzUwOTQtMicsIHN5c3RlbTogJ2h0dHA6Ly9sb2luYy5vcmcnLCBkaXNwbGF5OiAnQmxvb2QgcHJlc3N1cmUgcGFuZWwnIH1dLAogIH0sCiAgYm1pOiB7CiAgICBjb2Rpbmc6IFt7IGNvZGU6ICczOTE1Ni01Jywgc3lzdGVtOiAnaHR0cDovL2xvaW5jLm9yZycsIGRpc3BsYXk6ICdCb2R5IE1hc3MgSW5kZXggKEJNSSknIH1dLAogIH0sCn07Cg=="
      }
    },
    {
      "fullUrl": "urn:uuid:a364eece-2e4d-4679-9205-0a7f96bdfce6",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/javascript",
        "data": ""
      }
    },
    {
      "request": {
        "method": "PUT",
        "url": "$bot-gynecology-encounter-note-reference"
      },
      "resource": {
        "resourceType": "Bot",
        "id": "$bot-gynecology-encounter-note-id",
        "name": "gynecology-encounter-note",
        "runtimeVersion": "awslambda",
        "sourceCode": {
          "contentType": "text/typescript",
          "url": "urn:uuid:c6e597f1-5c64-4b0c-9ea8-113a08450bac"
        },
        "executableCode": {
          "contentType": "text/javascript",
          "url": "urn:uuid:a364eece-2e4d-4679-9205-0a7f96bdfce6"
        }
      }
    },
    {
      "request": {
        "url": "Subscription",
        "method": "POST",
        "ifNoneExist": "url=$bot-gynecology-encounter-note-reference"
      },
      "resource": {
        "resourceType": "Subscription",
        "status": "active",
        "reason": "gynecology-encounter-note",
        "channel": {
          "endpoint": "$bot-gynecology-encounter-note-reference",
          "type": "rest-hook"
        },
        "criteria": "QuestionnaireResponse?questionnaire=$gynecology-visit"
      }
    }
  ]
}
